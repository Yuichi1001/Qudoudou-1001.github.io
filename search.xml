<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>国科大-高性能计算编程-作业六</title>
      <link href="/posts/24430.html"/>
      <url>/posts/24430.html</url>
      
        <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p><img src="/posts/24430.htm/image-20240525132500822.png" alt></p><h2 id="提交内容一：编译运行代码、执行算例、统计运行时间并绘制加速比曲线"><a href="#提交内容一：编译运行代码、执行算例、统计运行时间并绘制加速比曲线" class="headerlink" title="提交内容一：编译运行代码、执行算例、统计运行时间并绘制加速比曲线"></a>提交内容一：编译运行代码、执行算例、统计运行时间并绘制加速比曲线</h2><h3 id="GhostExchange3D-ArrayAssign"><a href="#GhostExchange3D-ArrayAssign" class="headerlink" title="GhostExchange3D_ArrayAssign"></a>GhostExchange3D_ArrayAssign</h3><ul><li><p>创建并进入<code>build</code>文件夹，执行<code>cmake ..</code>及<code>make</code>来编译可执行文件</p></li><li><p>运行算例一<code>mpirun -np 1 ./GhostExchange -x 1 -y 1 -z 1</code></p><p><img src="/posts/24430.htm/629349049cecda340bb1007915764712.png" alt></p></li><li><p>运行算例二<code>mpirun -np 4 ./GhostExchange -x 1 -y 2 -z 2</code></p><p><img src="/posts/24430.htm/1be503835c38eb96b16f509b9e9d8c73.png" alt></p></li><li><p>运行算例三<code>mpirun -np 8 ./GhostExchange -x 2 -y 2 -z 2</code></p><p><img src="/posts/24430.htm/3a88e01179245940f5d2a1385775da99.png" alt></p></li><li><p>数据统计</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">thread_num</th><th style="text-align:center">stencil</th><th style="text-align:center">boundary condition</th><th style="text-align:center">ghost cell</th><th style="text-align:center">total</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">5.431515</td><td style="text-align:center">0.790956</td><td style="text-align:center">0.047246</td><td style="text-align:center">6.325972</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0.890351</td><td style="text-align:center">0.142488</td><td style="text-align:center">0.553822</td><td style="text-align:center">1.605789</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">0.533962</td><td style="text-align:center">0.075818</td><td style="text-align:center">0.599633</td><td style="text-align:center">1.219806</td></tr></tbody></table></div><h3 id="CartExchange3D-Neighbor"><a href="#CartExchange3D-Neighbor" class="headerlink" title="CartExchange3D_Neighbor"></a>CartExchange3D_Neighbor</h3><ul><li><p>创建并进入<code>build</code>文件夹，执行<code>cmake ..</code>及<code>make</code>来编译可执行文件</p></li><li><p>运行算例一<code>mpirun -np 1 ./CartExchange -x 1 -y 1 -z 1</code></p><p><img src="/posts/24430.htm/816b1e3b43b762e138d807097d1299c2.png" alt></p></li><li><p>运行算例二<code>mpirun -np 4 ./CartExchange -x 1 -y 2 -z 2</code></p><p><img src="/posts/24430.htm/43863d9c414c645223ebe73e01a16616.png" alt></p></li><li><p>运行算例三<code>mpirun -np 8 ./CartExchange -x 2 -y 2 -z 2</code></p><p><img src="/posts/24430.htm/a991f034dd17d08b50b9d6431945af2d.png" alt></p></li><li><p>数据统计</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">thread_num</th><th style="text-align:center">stencil</th><th style="text-align:center">boundary condition</th><th style="text-align:center">ghost cell</th><th style="text-align:center">total</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">5.490287</td><td style="text-align:center">0.790111</td><td style="text-align:center">0.000984</td><td style="text-align:center">6.337239</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0.882329</td><td style="text-align:center">0.148143</td><td style="text-align:center">0.502601</td><td style="text-align:center">1.548727</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">0.405536</td><td style="text-align:center">0.047157</td><td style="text-align:center">0.486865</td><td style="text-align:center">0.947385</td></tr></tbody></table></div><h3 id="加速比曲线绘制"><a href="#加速比曲线绘制" class="headerlink" title="加速比曲线绘制"></a>加速比曲线绘制</h3><ul><li>曲线绘制代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 时间数据（秒）</span>times <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">6.325972</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">1.605789</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">1.219806</span><span class="token punctuation">&#125;</span><span class="token comment"># 计算加速比</span>speedup <span class="token operator">=</span> <span class="token punctuation">&#123;</span>n<span class="token punctuation">:</span> times<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> t <span class="token keyword">for</span> n<span class="token punctuation">,</span> t <span class="token keyword">in</span> times<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment"># 绘制加速比曲线</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>speedup<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>speedup<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment"># 添加图表标题和标签</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Speedup Curve'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Number of Processes'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Speedup'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 显示图表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>GhostExchange3D_ArrayAssign</li></ul><p><img src="/posts/24430.htm/image-20240525133802124.png" alt></p><ul><li>CartExchange3D_Neighbor</li></ul><p><img src="/posts/24430.htm/image-20240525133840032.png" alt></p><h2 id="提交内容二：说明代码中MPI函数的功能"><a href="#提交内容二：说明代码中MPI函数的功能" class="headerlink" title="提交内容二：说明代码中MPI函数的功能"></a>提交内容二：说明代码中MPI函数的功能</h2><ul><li><p><code>MPI_Init</code></p><p>它初始化MPI库，并建立MPI环境，必须在调用任何其他MPI函数之前调用<code>MPI_Init</code></p></li><li><p><code>MPI_Comm_rank</code></p><p>获取当前进程的秩（rank），用于区分不同的进程。<code>MPI_COMM_WORLD</code> 是默认的通信器，表示所有进程都参与的通信域</p></li><li><p><code>MPI_Comm_size</code></p><p>获取总的进程数。<code>nprocs</code> 存储了当前通信域中总的进程数量</p></li><li><p><code>MPI_Irecv</code></p><p>非阻塞地接收消息</p></li><li><p><code>MPI_Isend</code></p><p>非阻塞地发送消息</p></li><li><p><code>MPI_Waitall</code></p><p>等待一组非阻塞通信操作完成</p></li><li><p><code>MPI_Allreduce</code></p><p>在所有进程中执行全局归约操作，并将结果分发给所有进程</p></li><li><p><code>MPI_Barrier</code></p><p>同步所有进程，确保所有进程都到达此点后才能继续执行。<code>MPI_Barrier</code>是一个阻塞操作，所有进程必须都调用这个函数，才能继续执行后续代码</p></li><li><p><code>MPI_Finalize</code></p><p>结束MPI环境，释放相关资源。调用<code>MPI_Finalize</code>后，不能再使用任何MPI函数</p></li><li><p><code>MPI_Cart_create</code></p><p>创建一个笛卡尔拓扑结构的通信域。<code>dims</code> 数组定义每个维度上的进程数，<code>periods</code> 数组定义每个维度上的周期性，<code>cart_comm</code> 是创建的通信域</p></li><li><p><code>MPI_Cart_coords</code></p><p>获取指定进程在笛卡尔拓扑结构中的坐标。<code>coords</code> 数组存储进程的坐标</p></li><li><p><code>MPI_Cart_shift</code></p><p>计算相邻进程的秩。第一个参数是通信域，第二个参数是移动的维度，第三个参数是移动的步数，后两个参数分别存储相邻进程的秩</p></li></ul><h2 id="自评分"><a href="#自评分" class="headerlink" title="自评分"></a>自评分</h2><h3 id="自评分-1"><a href="#自评分-1" class="headerlink" title="自评分"></a>自评分</h3><ul><li>5分（3+2）</li></ul><h3 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h3><ul><li>完成两个提交内容，使用python绘制加速比曲线</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国科大-高性能计算编程-作业五</title>
      <link href="/posts/32238.html"/>
      <url>/posts/32238.html</url>
      
        <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p><img src="/posts/32238.htm/image-20240509210549439.png" alt></p><h2 id="提交内容一：CUDA线程布局和内存层次"><a href="#提交内容一：CUDA线程布局和内存层次" class="headerlink" title="提交内容一：CUDA线程布局和内存层次"></a>提交内容一：CUDA线程布局和内存层次</h2><h3 id="线程布局"><a href="#线程布局" class="headerlink" title="线程布局"></a>线程布局</h3><p>在CUDA中，线程的布局从小到大总共有三个层次，分别为线程、线程块、网格</p><ul><li><strong>线程（Thread）：</strong><ul><li>线程是CUDA程序的最小执行单元</li><li>每个线程可以独立执行代码，并拥有自己的寄存器（局部内存）</li></ul></li><li><strong>线程块（Block）：</strong><ul><li>线程块是一定数量的线程的集合，它们可以共享一块共享内存</li><li>每个线程块内的线程可以通过同步原语进行协调</li></ul></li><li><strong>网格（Grid）：</strong><ul><li>网格是线程块的集合</li><li>一个CUDA内核可以启动多个线程块，所有这些块构成一个网格</li><li>网格可以是一维、二维或三维的结构</li></ul></li></ul><h3 id="内存层次"><a href="#内存层次" class="headerlink" title="内存层次"></a>内存层次</h3><p>CUDA在内存管理方面也存在很多个层次</p><ul><li><p><strong>寄存器（Registers）</strong>：</p><ul><li>每个线程拥有自己的寄存器，这是最快的存储形式</li><li>用于存储局部变量和临时计算结果</li></ul></li><li><p><strong>共享内存（Shared Memory）</strong>：</p><ul><li>由同一线程块内的所有线程共享</li><li>访问速度比全局内存快很多，但容量有限</li><li>适用于频繁访问的数据，可以显著提高性能</li></ul></li><li><p><strong>全局内存（Global Memory）</strong>：</p><ul><li>所有线程都可以访问的内存区域</li><li>访问速度较慢，但容量较大</li><li>通常用于存储从CPU传输的数据或大规模数据集</li></ul></li><li><p><strong>常量内存和纹理内存（Constant and Texture Memory）</strong>：</p><ul><li>常量内存用于存储不会改变的数据，对所有线程可见</li><li>纹理内存专用于图像处理，可以利用硬件优化的读取策略</li></ul></li></ul><h2 id="提交内容二：使用shared-memory优化代码"><a href="#提交内容二：使用shared-memory优化代码" class="headerlink" title="提交内容二：使用shared memory优化代码"></a>提交内容二：使用shared memory优化代码</h2><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><ul><li><p>原代码运行结果</p><p><img src="/posts/32238.htm/ea17794f3aa60e54ac7a58c7f15a0faf.png" alt></p></li><li><p>引入shared memory后的运行结果</p><p><img src="/posts/32238.htm/image-20240510120518453.png" alt></p></li></ul><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ul><li>优化后的代运行时间仅为原代码的50%</li></ul><h3 id="代码对比"><a href="#代码对比" class="headerlink" title="代码对比"></a>代码对比</h3><ul><li><strong>减少全局内存访问次数</strong>：<ul><li>原代码中的每个线程直接从全局内存读取它需要的所有数据</li><li>优化后的代码通过使用共享内存作为数据缓冲，每个线程块将其所需的数据加载到共享内存中，这样，线程之间可以共享这部分数据，减少了对全局内存的访问次数</li></ul></li><li><strong>合并内存访问</strong>：<ul><li>合并访存是指多个线程同时访问位于连续地址的内存位置，这样可以最大化内存传输的效率</li></ul></li><li><strong>减少内存访问延迟</strong>：<ul><li>共享内存比全局内存具有更低的访问延迟。通过利用共享内存缓存核心数据，每个线程处理其数据时的延迟可以显著降低，从而提高整体的执行效率。</li></ul></li><li><strong>提高带宽利用率</strong>：<ul><li>由于减少了对全局内存的直接访问次数，并且更多的访问是合并进行的，因此提高了内存带宽的利用率</li></ul></li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><ul><li><p>代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys&#x2F;time.h&gt;#include &lt;cuda.h&gt;#include &lt;cuda_runtime.h&gt;const int Nx &#x3D; 1024 * 2;const int Ny &#x3D; 1024 * 2;const int blockSize &#x3D; 256;  &#x2F;&#x2F; 线程块大小const int TIMES &#x3D; 10;&#x2F;&#x2F; 使用共享内存优化的stencil计算核函数__global__ void two_stencil_optimized(const int n, const double * __restrict__ in_xy, double * __restrict__ out_xy) &#123;    extern __shared__ double tile[];    int index &#x3D; blockIdx.x * blockDim.x + threadIdx.x;    int yindex &#x3D; index &#x2F; Nx;    int xindex &#x3D; index % Nx;    &#x2F;&#x2F; 加载输入数据到共享内存    tile[threadIdx.x] &#x3D; in_xy[index];    __syncthreads();    &#x2F;&#x2F; 确保只有内部的数据才被计算    if ((0 &lt; xindex &amp;&amp; xindex &lt; (Nx - 1)) &amp;&amp; (0 &lt; yindex &amp;&amp; yindex &lt; (Ny - 1))) &#123;        out_xy[index] &#x3D; 0.2 * (tile[threadIdx.x] + in_xy[index - 1] + in_xy[index + 1] + in_xy[index - Nx] + in_xy[index + Nx]);    &#125;    __syncthreads(); &#x2F;&#x2F; 确保所有操作在继续之前完成&#125;void fill_array(const int n, double *array) &#123;    double init &#x3D; (rand() % 1000) * 0.2;    for (int ii &#x3D; 0; ii &lt; n; ++ii) &#123;        *(array + ii) &#x3D; init + ii * 0.00001;    &#125;&#125;inline int64_t GetUsec() &#123;    struct timeval tv;    gettimeofday(&amp;tv, NULL);    return (tv.tv_sec * 1000000l) + tv.tv_usec;&#125;int main() &#123;    srand(202405);    double *host_in_xy &#x3D; new double[Nx*Ny];    double *host_out_xy &#x3D; new double[Nx*Ny];    fill_array(Nx*Ny, host_in_xy);    printf(&quot;host_in_xy[1000]&#x3D;%.5f\n&quot;, host_in_xy[1000]);        &#x2F;&#x2F; CUDA event 创建和计时    cudaEvent_t start, stop;    cudaEventCreate(&amp;start);    cudaEventCreate(&amp;stop);        double *dev_in_xy &#x3D; nullptr, *dev_out_xy &#x3D; nullptr;    cudaMalloc(&amp;dev_in_xy, sizeof(double) * Nx * Ny);    cudaMalloc(&amp;dev_out_xy, sizeof(double) * Nx * Ny);    cudaMemcpy(dev_in_xy, host_in_xy, sizeof(double) * Nx * Ny, cudaMemcpyHostToDevice);    cudaMemset(dev_out_xy, 0, sizeof(double) * Nx * Ny);    int numBlocks &#x3D; (Nx * Ny + blockSize - 1) &#x2F; blockSize;    printf(&quot;numBlocks&#x3D;%d\n&quot;, numBlocks);        &#x2F;&#x2F; warm up    two_stencil_optimized&lt;&lt;&lt;dim3(numBlocks, 1, 1), dim3(blockSize, 1, 1), blockSize * sizeof(double)&gt;&gt;&gt;(Nx * Ny, dev_in_xy, dev_out_xy);    cudaDeviceSynchronize();    cudaEventRecord(start);    int64_t ustart &#x3D; GetUsec();    for (int loop &#x3D; 0; loop &lt; TIMES; ++loop) &#123;        two_stencil_optimized&lt;&lt;&lt;dim3(numBlocks, 1, 1), dim3(blockSize, 1, 1), blockSize * sizeof(double)&gt;&gt;&gt;(Nx * Ny, dev_in_xy, dev_out_xy);    &#125;    cudaDeviceSynchronize();    cudaEventRecord(stop);    cudaEventSynchronize(stop);    int64_t ufinish &#x3D; GetUsec();    cudaMemcpy(host_out_xy, dev_out_xy, sizeof(double) * Nx * Ny, cudaMemcpyDeviceToHost);        float ms &#x3D; 0.0f;    cudaEventElapsedTime(&amp;ms, start, stop);    printf(&quot;kernel time&#x3D;%.5f\n&quot;, ms &#x2F; TIMES);    printf(&quot;kernel usec&#x3D;%ld, host_out_xy[10000]&#x3D;%.5f, host_out_xy[Nx*Ny - Nx - 16]&#x3D;%.5f\n&quot;, (ufinish - ustart) &#x2F; TIMES, host_out_xy[10000], host_out_xy[Nx * Ny - Nx - 16]);        cudaFree(dev_in_xy);    cudaFree(dev_out_xy);    delete[] host_in_xy;    delete[] host_out_xy;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="自评分"><a href="#自评分" class="headerlink" title="自评分"></a>自评分</h2><h3 id="自评分-1"><a href="#自评分-1" class="headerlink" title="自评分"></a>自评分</h3><ul><li>15分（5+10）</li></ul><h3 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h3><ul><li>完成两个提交内容</li><li>优化后的代码运行时间仅为原代码的50%</li><li>对优化前后的代码进行对比分析</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国科大-高性能计算编程-作业四</title>
      <link href="/posts/59879.html"/>
      <url>/posts/59879.html</url>
      
        <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p><img src="/posts/59879.htm/image-20240421192126848.png" alt></p><h2 id="提交内容一"><a href="#提交内容一" class="headerlink" title="提交内容一"></a>提交内容一</h2><h3 id="解释SplitStencil-opt1-c"><a href="#解释SplitStencil-opt1-c" class="headerlink" title="解释SplitStencil_opt1.c"></a>解释SplitStencil_opt1.c</h3><h4 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h4><p><code>SplitStencil_opt1.c</code>程序使用多线程来执行一个分割式计算模板（Stencil）的优化算法，主要用于数值模拟中的数组数据处理。程序通过OpenMP实现并行化，加速数组的初始化、数据清洗（flushing），以及模板计算。</p><h4 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h4><ul><li><p><strong>初始化</strong>：使用多线程初始化一个二维数组，设置特定区域的初始值。</p></li><li><p><strong>清洗数据</strong>：对一个辅助数组进行循环的数据清洗操作。</p></li><li><p><strong>模板计算</strong>：执行核心的模板计算，涉及到数组的读取和更新。</p></li><li><p><strong>性能监控</strong>：记录并输出程序的初始化、清洗和模板计算的时间。</p></li></ul><h4 id="主要函数说明"><a href="#主要函数说明" class="headerlink" title="主要函数说明"></a>主要函数说明</h4><ul><li><code>main()</code>：程序入口，负责数组的分配、并行区域的定义和执行，以及性能统计。</li><li><code>SplitStencil()</code>：核心的模板计算函数，处理数组的更新。</li><li><code>malloc2D()</code>：辅助函数，用于分配二维数组的空间。</li><li><code>cpu_timer_start()</code> 和 <code>cpu_timer_stop()</code>：计时函数，用于监控各部分的执行时间。</li></ul><h4 id="程序注释"><a href="#程序注释" class="headerlink" title="程序注释"></a>程序注释</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;omp.h&gt;#include &quot;malloc2D.h&quot;#include &quot;timer.h&quot;void SplitStencil(double **a, int imax, int jmax);&#x2F;&#x2F; 定义宏，分别用于计算两个值的最小值和最大值#define MIN(a,b) ((a) &lt; (b) ? (a) : (b))#define MAX(a,b) ((a) &gt; (b) ? (a) : (b))int main(int argc, char *argv[])&#123;   &#x2F;&#x2F; 启用OpenMP并行区域   #pragma omp parallel      &#x2F;&#x2F; 如果是第0个线程      if (omp_get_thread_num() &#x3D;&#x3D; 0)         &#x2F;&#x2F; 打印线程数         printf(&quot;Running with %d thread(s)\n&quot;,omp_get_num_threads());   struct timespec tstart_init, tstart_flush, tstart_stencil, tstart_total;   double init_time, flush_time, stencil_time, total_time;   &#x2F;&#x2F; 定义数组的尺寸   int imax&#x3D;2002, jmax &#x3D; 2002;   char string[60];   &#x2F;&#x2F; 分配二维数组a   double** a &#x3D; malloc2D(jmax, imax);   &#x2F;&#x2F; 分配flush数组   int *flush &#x3D; (int *)malloc(jmax*imax*sizeof(int)*4);   &#x2F;&#x2F; 总时间计时开始   cpu_timer_start(&amp;tstart_total);#pragma omp parallel   &#123;      &#x2F;&#x2F; 获取当前线程ID      int thread_id &#x3D; omp_get_thread_num();      &#x2F;&#x2F; 获取线程总数      int nthreads &#x3D; omp_get_num_threads();      &#x2F;&#x2F; 计算每个线程处理的行范围      int jltb &#x3D; 1 + (jmax-2) * ( thread_id     ) &#x2F; nthreads;      int jutb &#x3D; 1 + (jmax-2) * ( thread_id + 1 ) &#x2F; nthreads;      &#x2F;&#x2F; 计算每个线程处理的flush数组范围      int ifltb &#x3D; (jmax*imax*4) * ( thread_id     ) &#x2F; nthreads;      int ifutb &#x3D; (jmax*imax*4) * ( thread_id + 1 ) &#x2F; nthreads;             &#x2F;&#x2F; 确保边界条件处理正确      int jltb0 &#x3D; jltb;      if (thread_id &#x3D;&#x3D; 0) jltb0--;      int jutb0 &#x3D; jutb;      if (thread_id &#x3D;&#x3D; nthreads-1) jutb0++;      &#x2F;&#x2F; 计算核心处理区域      int kmin &#x3D; MAX(jmax&#x2F;2-5,jltb);      int kmax &#x3D; MIN(jmax&#x2F;2+5,jutb);      if (thread_id &#x3D;&#x3D; 0) cpu_timer_start(&amp;tstart_init);      for (int j &#x3D; jltb0; j &lt; jutb0; j++)&#123;         for (int i &#x3D; 0; i &lt; imax; i++)&#123;            &#x2F;&#x2F; 初始化数组a            a[j][i] &#x3D; 5.0;         &#125;      &#125;      for (int j &#x3D; kmin; j &lt; kmax; j++)&#123;         for (int i &#x3D; imax&#x2F;2 - 5; i &lt; imax&#x2F;2 -1; i++)&#123;            &#x2F;&#x2F; 在核心处理区域内设置更高的初始值            a[j][i] &#x3D; 400.0;         &#125;      &#125;&#x2F;&#x2F; 确保所有线程完成初始化#pragma omp barrier      &#x2F;&#x2F; 记录初始化时间      if (thread_id &#x3D;&#x3D; 0) init_time +&#x3D; cpu_timer_stop(tstart_init);      &#x2F;&#x2F; 进行100次迭代      for (int iter &#x3D; 0; iter &lt; 100; iter++)&#123;         if (thread_id &#x3D;&#x3D; 0) cpu_timer_start(&amp;tstart_flush);         for (int l &#x3D; ifltb; l &lt; ifutb; l++)&#123;            &#x2F;&#x2F; 清洗flush数组            flush[l] &#x3D; 1.0;         &#125;         if (thread_id &#x3D;&#x3D; 0)&#123;            &#x2F;&#x2F; 记录清洗时间            flush_time +&#x3D; cpu_timer_stop(tstart_flush);            &#x2F;&#x2F; 格式化输出            sprintf(string,&quot;flush %d\n&quot;,flush[5]);            cpu_timer_start(&amp;tstart_stencil);         &#125;         &#x2F;&#x2F; 调用模板计算函数         SplitStencil(a, imax, jmax);         if (thread_id &#x3D;&#x3D; 0)&#123;            &#x2F;&#x2F; 记录模板计算时间            stencil_time +&#x3D; cpu_timer_stop(tstart_stencil);            &#x2F;&#x2F; 格式化输出数组a的一个值            sprintf(string,&quot;a %lf\n&quot;,a[5][5]);            &#x2F;&#x2F; 每1000次迭代打印一次            if (iter%1000 &#x3D;&#x3D; 0) printf(&quot;Iter %d\n&quot;,iter);         &#125;      &#125;   &#125; &#x2F;&#x2F; 结束并行区域   &#x2F;&#x2F; 总时间计时结束   total_time +&#x3D; cpu_timer_stop(tstart_total);   &#x2F;&#x2F; 输出时间统计结果   printf(&quot;Timing is init %f flush %f stencil %f total %f\n&quot;,          init_time,flush_time,stencil_time,total_time);   &#x2F;&#x2F; 释放数组a   free(a);   &#x2F;&#x2F; 释放数组flush   free(flush);&#125;void SplitStencil(double **a, int imax, int jmax)&#123;   int thread_id &#x3D; omp_get_thread_num();   int nthreads &#x3D; omp_get_num_threads();   &#x2F;&#x2F; 每个线程处理的行范围   int jltb &#x3D; 1 + (jmax-2) * thread_id &#x2F; nthreads;   int jutb &#x3D; 1 + (jmax-2) * (thread_id + 1) &#x2F; nthreads;   int jfltb &#x3D; jltb;   int jfutb &#x3D; jutb;   if (thread_id &#x3D;&#x3D; 0) jfltb--;   &#x2F;&#x2F; 分配边界面数组   double** xface &#x3D; (double **)malloc2D(jutb-jltb, imax-1);   static double** yface;   if (thread_id &#x3D;&#x3D; 0) yface &#x3D; (double **)malloc2D(jmax+2, imax);   #pragma omp barrier   &#x2F;&#x2F; 计算x方向和y方向边界面值   for (int j &#x3D; jltb; j &lt; jutb; j++) &#123;      for (int i &#x3D; 0; i &lt; imax-1; i++) &#123;         xface[j-jltb][i] &#x3D; (a[j][i+1] + a[j][i]) &#x2F; 2.0;      &#125;   &#125;   for (int j &#x3D; jfltb; j &lt; jfutb; j++) &#123;      for (int i &#x3D; 1; i &lt; imax-1; i++) &#123;         yface[j][i] &#x3D; (a[j+1][i] + a[j][i]) &#x2F; 2.0;      &#125;   &#125;   #pragma omp barrier   &#x2F;&#x2F; 根据边界面更新数组值   for (int j &#x3D; jltb; j &lt; jutb; j++) &#123;      for (int i &#x3D; 1; i &lt; imax-1; i++) &#123;         a[j][i] &#x3D; (a[j][i] + xface[j-jltb][i] + xface[j-jltb][i-1] +                            yface[j][i] + yface[j-1][i]) &#x2F; 5.0;      &#125;   &#125;   free(xface);   #pragma omp barrier   &#x2F;&#x2F; 释放内存   if (thread_id &#x3D;&#x3D; 0) free(yface); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="记录run-sh输出的时间数据"><a href="#记录run-sh输出的时间数据" class="headerlink" title="记录run.sh输出的时间数据"></a>记录run.sh输出的时间数据</h3><ul><li>进入build文件夹进行cmake</li></ul><p><img src="/posts/59879.htm/image-20240421205226310.png" alt></p><ul><li>进行make</li></ul><p><img src="/posts/59879.htm/image-20240421205255450.png" alt></p><ul><li>运行run.sh</li></ul><p><img src="/posts/59879.htm/image-20240421204246828.png" alt></p><h2 id="提交内容二"><a href="#提交内容二" class="headerlink" title="提交内容二"></a>提交内容二</h2><h3 id="解释prime-task”任务”并行原理"><a href="#解释prime-task”任务”并行原理" class="headerlink" title="解释prime_task”任务”并行原理"></a>解释prime_task”任务”并行原理</h3><p><code>prime_task.cpp</code>通过任务并行化，有效地将一个大的问题（检查20000000以内的数字有多少个质数）分解成规模更小的子问题，并利用多核处理器的并行处理能力来加速计算。这样的分解减少了线程间的依赖，允许更高效的并行执行。它的详细工作原理如下：</p><ul><li><strong>OpenMP 库和指令</strong></li></ul><p>首先，程序包含了 OpenMP 库 <code>&lt;omp.h&gt;</code>，这是进行并行编程的关键。通过使用 OpenMP 的指令（如 <code>#pragma omp</code>），程序能够在多个处理器上并行执行。</p><ul><li><strong>主要的并行结构</strong></li></ul><p>在 <code>main</code> 函数中，通过使用 <code>#pragma omp parallel</code>，创建了一个并行区域，在该区域内的代码将会被多个线程并行执行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma omp parallel &#123;    &#x2F;&#x2F; 并行区域的代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>创建并行任务</strong></li></ul><p>在并行区域内部，使用 <code>#pragma omp single nowait</code> 指定一个线程来执行接下来的循环，并且这个指令允许其他线程不必等待这个线程完成循环即可继续执行：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma omp single nowait&#123;    for (i &#x3D; 2; i &lt;&#x3D; ITER ; i+&#x3D;1000) &#123;        &#x2F;&#x2F; 创建任务的代码    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>任务划分</strong></li></ul><p>循环内部，每次循环迭代都定义了一个从 <code>num_start</code> 到 <code>num_end</code> 的区间，每个区间长度大约是1000。对于每个这样的区间，使用 <code>#pragma omp task</code> 创建一个新的任务来执行 <code>check_prime</code> 函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma omp taskcheck_prime(num_start,num_end);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里，每个任务都是独立的，并在不同的线程上并行执行，这样可以同时检查多个数区间内的质数。</p><ul><li><strong>等待所有任务完成</strong></li></ul><p>所有的任务创建之后，使用 <code>#pragma omp taskwait</code> 来确保所有任务完成之前，不会继续执行后面的代码。这保证了在输出最终的质数数量和时间统计之前，所有的质数检查任务都已完成。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma omp taskwait<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>统计和输出</strong></li></ul><p>最后，统计所有检查出的质数数量（由全局变量 <code>sum</code> 维护），并计算整个并行任务所消耗的时间，然后输出。</p><h3 id="记录程序输出的时间数据"><a href="#记录程序输出的时间数据" class="headerlink" title="记录程序输出的时间数据"></a>记录程序输出的时间数据</h3><ul><li>编译prime_task</li></ul><p><img src="/posts/59879.htm/image-20240421205021481.png" alt></p><ul><li>修改run.sh</li></ul><p><img src="/posts/59879.htm/image-20240421205042547.png" alt></p><ul><li>运行run.sh</li></ul><p><img src="/posts/59879.htm/image-20240421205118875.png" alt></p><h2 id="自评分及理由"><a href="#自评分及理由" class="headerlink" title="自评分及理由"></a>自评分及理由</h2><h3 id="自评分"><a href="#自评分" class="headerlink" title="自评分"></a>自评分</h3><ul><li>10分</li></ul><h3 id="评分理由"><a href="#评分理由" class="headerlink" title="评分理由"></a>评分理由</h3><ul><li>完成提交内容一：编写<code>SplitStencil_opt1.c</code>的代码说明文档，说明程序流程，简要注释代码；记录<code>SplitStencil_opt1.c</code>在1,2,4线程运行时的时间数据(7分)</li><li>完成提交内容二：说明<code>prime_task.cpp</code>的并行原理；记录<code>prime_task</code>在1,2,4线程运行时的时间数据(3分)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国科大-高性能计算编程-作业三</title>
      <link href="/posts/5167.html"/>
      <url>/posts/5167.html</url>
      
        <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p><img src="/posts/5167.htm/image-20240406193439601.png" alt></p><h2 id="提交内容一：改写代码"><a href="#提交内容一：改写代码" class="headerlink" title="提交内容一：改写代码"></a>提交内容一：改写代码</h2><h3 id="原代码编译运行结果"><a href="#原代码编译运行结果" class="headerlink" title="原代码编译运行结果"></a>原代码编译运行结果</h3><p><img src="/posts/5167.htm/image-20240406193723869.png" alt></p><h3 id="使用avx进行向量化"><a href="#使用avx进行向量化" class="headerlink" title="使用avx进行向量化"></a>使用avx进行向量化</h3><ul><li>编译运行结果</li></ul><p><img src="/posts/5167.htm/image-20240406193837283.png" alt></p><ul><li>代码详情</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Convolve1D_Ks5_F64_cpp_AVX(double *__restrict__ y, const double * __restrict__ x, const double*  __restrict__ kernel, int64_t num_pts) &#123;    constexpr int64_t kernel_size &#x3D; 5;    constexpr int64_t ks2 &#x3D; kernel_size &#x2F; 2;    if (num_pts &lt; kernel_size) &#123;        return false;    &#125;    for (int64_t i &#x3D; ks2; i &lt; num_pts - ks2; i +&#x3D; 4) &#123;        __m256d k2 &#x3D; _mm256_set1_pd(kernel[ks2 - 2]);        __m256d k1 &#x3D; _mm256_set1_pd(kernel[ks2 - 1]);        __m256d k0 &#x3D; _mm256_set1_pd(kernel[ks2]);        __m256d kn1 &#x3D; _mm256_set1_pd(kernel[ks2 + 1]);        __m256d kn2 &#x3D; _mm256_set1_pd(kernel[ks2 + 2]);        __m256d x2 &#x3D; _mm256_loadu_pd(x + i + 2);        __m256d x1 &#x3D; _mm256_loadu_pd(x + i + 1);        __m256d x0 &#x3D; _mm256_loadu_pd(x + i);        __m256d xn1 &#x3D; _mm256_loadu_pd(x + i - 1);        __m256d xn2 &#x3D; _mm256_loadu_pd(x + i - 2);        __m256d y0 &#x3D; _mm256_mul_pd(k2, x2);        __m256d y1 &#x3D; _mm256_mul_pd(k1, x1);        __m256d y2 &#x3D; _mm256_mul_pd(k0, x0);        __m256d y3 &#x3D; _mm256_mul_pd(kn1, xn1);        __m256d y4 &#x3D; _mm256_mul_pd(kn2, xn2);                __m256d result &#x3D; _mm256_add_pd(_mm256_add_pd(_mm256_add_pd(y0, y1), _mm256_add_pd(y2, y3)), y4);                _mm256_storeu_pd(y + i, result);    &#125;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用avx2进行向量化"><a href="#使用avx2进行向量化" class="headerlink" title="使用avx2进行向量化"></a>使用avx2进行向量化</h3><ul><li>avx2在avx的基础上进行了一些扩展，新增了FMA(融合乘法和加法)、gather(从非连续内存位置加载数据到一个寄存器中)、permute(在寄存器内重新排列数据)等新的方法</li><li>因此我在代码中尝试融入fma方法，试试能不能再次降低运行时间</li><li>编译运行时间</li></ul><p><img src="/posts/5167.htm/image-20240406194753888.png" alt></p><ul><li>代码详情</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Convolve1D_Ks5_F64_cpp_AVX2(double *__restrict__ y, const double * __restrict__ x, const double*  __restrict__ kernel, int64_t num_pts) &#123;    constexpr int64_t kernel_size &#x3D; 5;    constexpr int64_t ks2 &#x3D; kernel_size &#x2F; 2;    if (num_pts &lt; kernel_size) &#123;        return false;    &#125;    for (int64_t i &#x3D; ks2; i &lt; num_pts - ks2; i +&#x3D; 4) &#123;        __m256d k2 &#x3D; _mm256_set1_pd(kernel[ks2 - 2]);        __m256d k1 &#x3D; _mm256_set1_pd(kernel[ks2 - 1]);        __m256d k0 &#x3D; _mm256_set1_pd(kernel[ks2]);        __m256d kn1 &#x3D; _mm256_set1_pd(kernel[ks2 + 1]);        __m256d kn2 &#x3D; _mm256_set1_pd(kernel[ks2 + 2]);        __m256d x2 &#x3D; _mm256_loadu_pd(x + i + 2);        __m256d x1 &#x3D; _mm256_loadu_pd(x + i + 1);        __m256d x0 &#x3D; _mm256_loadu_pd(x + i);        __m256d xn1 &#x3D; _mm256_loadu_pd(x + i - 1);        __m256d xn2 &#x3D; _mm256_loadu_pd(x + i - 2);        __m256d result &#x3D; _mm256_setzero_pd();        result &#x3D; _mm256_fmadd_pd(k2, x2, result);        result &#x3D; _mm256_fmadd_pd(k1, x1, result);        result &#x3D; _mm256_fmadd_pd(k0, x0, result);        result &#x3D; _mm256_fmadd_pd(kn1, xn1, result);        result &#x3D; _mm256_fmadd_pd(kn2, xn2, result);        _mm256_storeu_pd(y + i, result);    &#125;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行时间对比"><a href="#运行时间对比" class="headerlink" title="运行时间对比"></a>运行时间对比</h3><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">原代码</th><th style="text-align:center">AVX</th><th style="text-align:center">AVX2</th></tr></thead><tbody><tr><td style="text-align:center">timing</td><td style="text-align:center">13241us</td><td style="text-align:center">10648us</td><td style="text-align:center">11179us</td></tr></tbody></table></div><ul><li>在同样使用-O2优化级别的前提下，使用avx向量化内嵌指令修改后的代码运行时间提升了20%左右</li><li>使用avx2中的fma特性融合加法和乘法后，运行时间反而略微上涨</li></ul><h2 id="提交内容二：编译运行代码"><a href="#提交内容二：编译运行代码" class="headerlink" title="提交内容二：编译运行代码"></a>提交内容二：编译运行代码</h2><ul><li>gather.cpp</li></ul><p><img src="/posts/5167.htm/image-20240406193550575.png" alt></p><ul><li>permute.cpp</li></ul><p><img src="/posts/5167.htm/image-20240406193620545.png" alt></p><h2 id="总结分析"><a href="#总结分析" class="headerlink" title="总结分析"></a>总结分析</h2><ul><li>使用向量化内嵌指令可以大幅度提升代码的运行速度</li><li>使用avx2中的fma融合加法和乘法操作不一定能提升代码运行速度，反而可能产生不好的影响。在本次作业的代码里，原来的各个乘法之间没有依赖关系，<code>__m256d y0</code>到<code>__m256d y4</code>这五个乘法运算可能并行地运行。但是如果使用fma将乘法操作和最后的加法操作进行融合，代码就需要进行一次乘法并累加到<code>result</code>后才能进行下一次乘法，这样反而浪费了时间</li></ul><h2 id="自评分及理由"><a href="#自评分及理由" class="headerlink" title="自评分及理由"></a>自评分及理由</h2><h3 id="自评分"><a href="#自评分" class="headerlink" title="自评分"></a>自评分</h3><ul><li>10分</li></ul><h3 id="评分理由"><a href="#评分理由" class="headerlink" title="评分理由"></a>评分理由</h3><ul><li>完成提交内容一：使用avx和avx2的fma特性对原代码进行优化、比较代码运行时间，并对产生的现象进行了分析(7分)</li><li>完成提交内容二：编译运行<code>gather.cpp</code>和<code>permute.cpp</code>(3分)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国科大-高性能计算编程-作业二</title>
      <link href="/posts/30702.html"/>
      <url>/posts/30702.html</url>
      
        <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p><img src="/posts/30702.htm/image-20240322125653553.png" alt></p><h2 id="提交内容一：平台信息"><a href="#提交内容一：平台信息" class="headerlink" title="提交内容一：平台信息"></a>提交内容一：平台信息</h2><ul><li>本次作业在Windows平台上进行了内容实现，具体平台信息如下</li></ul><h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><ul><li><p>系统：Win11-23H2</p></li><li><p>CPU：i9-13900HX(x86)</p></li><li>内存：64G</li><li>IDE：CLion</li><li>编译器：MinGW</li></ul><h2 id="提交内容二：原代码、SoA及各优化方式的运行结果"><a href="#提交内容二：原代码、SoA及各优化方式的运行结果" class="headerlink" title="提交内容二：原代码、SoA及各优化方式的运行结果"></a>提交内容二：原代码、SoA及各优化方式的运行结果</h2><h3 id="原代码的运行结果"><a href="#原代码的运行结果" class="headerlink" title="原代码的运行结果"></a>原代码的运行结果</h3><p><img src="/posts/30702.htm/6dac904befb23fc1036c477ffb5d7647.png" alt></p><h3 id="SoA方式的运行结果"><a href="#SoA方式的运行结果" class="headerlink" title="SoA方式的运行结果"></a>SoA方式的运行结果</h3><p><img src="/posts/30702.htm/9c30035755d863ffd48e868c4ec4b115.png" alt></p><h3 id="SoA方式下使用内存对齐进行优化的运行结果"><a href="#SoA方式下使用内存对齐进行优化的运行结果" class="headerlink" title="SoA方式下使用内存对齐进行优化的运行结果"></a>SoA方式下使用内存对齐进行优化的运行结果</h3><p><img src="/posts/30702.htm/image-20240322140140642.png" alt></p><h3 id="SoA方式下使用循环展开进行优化的运行结果"><a href="#SoA方式下使用循环展开进行优化的运行结果" class="headerlink" title="SoA方式下使用循环展开进行优化的运行结果"></a>SoA方式下使用循环展开进行优化的运行结果</h3><p><img src="/posts/30702.htm/image-20240322141032001.png" alt></p><h3 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h3><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">muladd,timing</th><th style="text-align:center">sum</th><th style="text-align:center">timing</th></tr></thead><tbody><tr><td style="text-align:center">AoS</td><td style="text-align:center">731870us</td><td style="text-align:center">4582696570</td><td style="text-align:center">59257us</td></tr><tr><td style="text-align:center">SoA</td><td style="text-align:center">261313us</td><td style="text-align:center">4582696570</td><td style="text-align:center">17589us</td></tr><tr><td style="text-align:center">SoA_Align</td><td style="text-align:center">307924us</td><td style="text-align:center">4582696570</td><td style="text-align:center">17527us</td></tr><tr><td style="text-align:center">SoA_Unrolling</td><td style="text-align:center">263744us</td><td style="text-align:center">4582696570</td><td style="text-align:center">17353us</td></tr></tbody></table></div><h2 id="提交内容三：分析各个版本的代码"><a href="#提交内容三：分析各个版本的代码" class="headerlink" title="提交内容三：分析各个版本的代码"></a>提交内容三：分析各个版本的代码</h2><ul><li>在windows中，无法使用perf进行代码的性能分析，因此我采用very sleepy对各个版本的代码进行分析</li><li>为了使效果更加明显，我将各个版本的代码以函数的形式写在同一个cpp文件中，具体运行效果如下</li></ul><p><img src="/posts/30702.htm/image-20240322165956968.png" alt></p><ul><li><p>可以看到使用SoA分配方式以及在SoA的基础上再次进行内存对齐和循环展开优化后的代码在运行效率上高出源代码50%左右。这应该是由于SoA分配方式减少了大量的寻址工作所造成的。</p></li><li><p>但是在SoA的基础上再次进行内存对齐和循环展开优化后的代码相比于SoA并没有太大的效率提升。这应该是由以下两个原因组成：</p><ul><li><p>SoA分配方式所申请的内存是连续的内存块，已经保证了内存空间的连续分布</p></li><li><p>-O2编译时已经由编译器帮用户进行了适当的循环展开</p></li></ul></li><li><p>使用-O0命令再次编译后测试结果如下</p><p><img src="/posts/30702.htm/image-20240322183905985.png" alt></p></li><li><p>可以看到SoA已经保证了内存空间的连续分布，再次手动对齐反而可能造成时间的浪费</p></li><li><p>如果不让编译器进行优化，而是手动对循环进行展开的话，是可以提升运行效率的。</p></li><li><p>本次实验中手动的循环展开只展开了四次，所以效果不是很明显，具体代码见附录</p></li></ul><h2 id="自评分及理由"><a href="#自评分及理由" class="headerlink" title="自评分及理由"></a>自评分及理由</h2><h3 id="自评分"><a href="#自评分" class="headerlink" title="自评分"></a>自评分</h3><ul><li>10分（6+2+2）</li></ul><h3 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h3><ul><li>提交作业要求的三个内容</li><li>编写SoA及SoA基础上的内存对齐和循环展开代码，并收集这四种情况下的运行时间（6+2=8分）</li><li>由于windows无法使用perf，使用very sleepy分析各个版本的代码运行时间，以及分析了产生运行时间差异的原因（2分）</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;sys&#x2F;time.h&gt;#include &lt;cstdint&gt;inline int64_t GetUsec()&#123;    struct timeval tv;    gettimeofday(&amp;tv, NULL);    return (tv.tv_sec * 1000000l) + tv.tv_usec;&#125;typedef struct&#123;    double x;    double y;    double z;&#125; XYZ;typedef struct&#123;    double mass;    XYZ acct;    XYZ noused; &#x2F;&#x2F; but here    XYZ Velocity;&#125; Element;const int ELEMENT_NUM &#x3D; (4096 * 4096);int homework2()&#123;    Element *elements &#x3D; new Element[ELEMENT_NUM];    srand(202403);    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)    &#123;        elements[ii].mass &#x3D; (double)(rand() % 10);        elements[ii].acct.x &#x3D; (double)(rand() % 10) - 5.0;        elements[ii].acct.y &#x3D; (double)(rand() % 10) - 5.0;        elements[ii].acct.z &#x3D; (double)(rand() % 10) - 5.0;        elements[ii].Velocity.x &#x3D; (double)(rand() % 10);        elements[ii].Velocity.y &#x3D; (double)(rand() % 10);        elements[ii].Velocity.z &#x3D; (double)(rand() % 10);    &#125;    size_t start &#x3D; GetUsec();    double dt &#x3D; 1.0;    for (size_t step &#x3D; 0; step &lt; 10; ++step)    &#123;        for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)        &#123;            elements[ii].Velocity.x +&#x3D; dt * elements[ii].acct.x;            elements[ii].Velocity.y +&#x3D; dt * elements[ii].acct.y;            elements[ii].Velocity.z +&#x3D; dt * elements[ii].acct.z;        &#125;        dt &#x3D; dt * (((rand() % 10) &#x2F; 10.0) * 2.0);    &#125;    size_t finish &#x3D; GetUsec();    printf(&quot;muladd,timing&#x3D;%ldus\n&quot;, finish - start);    start &#x3D; GetUsec();    double sum &#x3D; 0.0;    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)    &#123;        sum +&#x3D; 0.5 * elements[ii].mass * (elements[ii].Velocity.x * elements[ii].Velocity.x + elements[ii].Velocity.y * elements[ii].Velocity.y + elements[ii].Velocity.z * elements[ii].Velocity.z);    &#125;    finish &#x3D; GetUsec();    printf(&quot;sum &#x3D; %.8e,timing&#x3D;%ldus\n&quot;, sum, finish - start);    delete[] elements;    return 0;&#125;typedef struct&#123;    double *x;    double *y;    double *z;&#125; XYZ_SoA;typedef struct&#123;    double *mass;    XYZ_SoA acct;    XYZ_SoA noused; &#x2F;&#x2F; but here    XYZ_SoA Velocity;&#125; Element_SoA;int homework2_SoA()&#123;    Element_SoA elements;    elements.mass &#x3D; new double[ELEMENT_NUM];    elements.acct.x &#x3D; new double[ELEMENT_NUM];    elements.acct.y &#x3D; new double[ELEMENT_NUM];    elements.acct.z &#x3D; new double[ELEMENT_NUM];    elements.noused.x &#x3D; new double[ELEMENT_NUM];    elements.noused.y &#x3D; new double[ELEMENT_NUM];    elements.noused.z &#x3D; new double[ELEMENT_NUM];    elements.Velocity.x &#x3D; new double[ELEMENT_NUM];    elements.Velocity.y &#x3D; new double[ELEMENT_NUM];    elements.Velocity.z &#x3D; new double[ELEMENT_NUM];    srand(202403);    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)    &#123;        elements.mass[ii] &#x3D; (double)(rand() % 10);        elements.acct.x[ii] &#x3D; (double)(rand() % 10) - 5.0;        elements.acct.y[ii] &#x3D; (double)(rand() % 10) - 5.0;        elements.acct.z[ii] &#x3D; (double)(rand() % 10) - 5.0;        elements.Velocity.x[ii] &#x3D; (double)(rand() % 10);        elements.Velocity.y[ii] &#x3D; (double)(rand() % 10);        elements.Velocity.z[ii] &#x3D; (double)(rand() % 10);    &#125;    size_t start &#x3D; GetUsec();    double dt &#x3D; 1.0;    for (size_t step &#x3D; 0; step &lt; 10; ++step)    &#123;        for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)        &#123;            elements.Velocity.x[ii] +&#x3D; dt * elements.acct.x[ii];            elements.Velocity.y[ii] +&#x3D; dt * elements.acct.y[ii];            elements.Velocity.z[ii] +&#x3D; dt * elements.acct.z[ii];        &#125;        dt &#x3D; dt * (((rand() % 10) &#x2F; 10.0) * 2.0);        &#x2F;&#x2F; SoA code below is slow  on AMD EPYC 7713 64-Core Processor.        &#x2F;&#x2F; Splitting into three loops is better way.        &#x2F;*for(size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)&#123;            ele_soa.vel_x[ii] +&#x3D; dt * ele_soa.acct_x[ii];            ele_soa.vel_y[ii] +&#x3D; dt * ele_soa.acct_y[ii];            ele_soa.vel_z[ii] +&#x3D; dt * ele_soa.acct_z[ii];          &#125;        *&#x2F;    &#125;    size_t finish &#x3D; GetUsec();    printf(&quot;muladd,timing&#x3D;%ldus\n&quot;, finish - start);    start &#x3D; GetUsec();    double sum &#x3D; 0.0;    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)    &#123;        sum +&#x3D; 0.5 * elements.mass[ii] * (elements.Velocity.x[ii] * elements.Velocity.x[ii] + elements.Velocity.y[ii] * elements.Velocity.y[ii] + elements.Velocity.z[ii] * elements.Velocity.z[ii]);    &#125;    finish &#x3D; GetUsec();    printf(&quot;sum &#x3D; %.8e,timing&#x3D;%ldus\n&quot;, sum, finish - start);    return 0;&#125;typedef struct&#123;    double *x;    double *y;    double *z;&#125; XYZ_SoA_Align;typedef struct&#123;    double *mass;    XYZ_SoA_Align acct;    XYZ_SoA_Align noused; &#x2F;&#x2F; but here    XYZ_SoA_Align Velocity;&#125; Element_SoA_Align;int homework2_SoA_Align()&#123;    size_t alignment &#x3D; 64;    Element_SoA_Align elements;    elements.mass &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.acct.x &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.acct.y &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.acct.z &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.noused.x &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.noused.y &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.noused.z &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.Velocity.x &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.Velocity.y &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    elements.Velocity.z &#x3D; (double*)_aligned_malloc(ELEMENT_NUM * sizeof(double), alignment);    srand(202403);    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)    &#123;        elements.mass[ii] &#x3D; (double)(rand() % 10);        elements.acct.x[ii] &#x3D; (double)(rand() % 10) - 5.0;        elements.acct.y[ii] &#x3D; (double)(rand() % 10) - 5.0;        elements.acct.z[ii] &#x3D; (double)(rand() % 10) - 5.0;        elements.Velocity.x[ii] &#x3D; (double)(rand() % 10);        elements.Velocity.y[ii] &#x3D; (double)(rand() % 10);        elements.Velocity.z[ii] &#x3D; (double)(rand() % 10);    &#125;    size_t start &#x3D; GetUsec();    double dt &#x3D; 1.0;    for (size_t step &#x3D; 0; step &lt; 10; ++step)    &#123;        for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)        &#123;            elements.Velocity.x[ii] +&#x3D; dt * elements.acct.x[ii];            elements.Velocity.y[ii] +&#x3D; dt * elements.acct.y[ii];            elements.Velocity.z[ii] +&#x3D; dt * elements.acct.z[ii];        &#125;        dt &#x3D; dt * (((rand() % 10) &#x2F; 10.0) * 2.0);    &#125;    size_t finish &#x3D; GetUsec();    printf(&quot;muladd,timing&#x3D;%ldus\n&quot;, finish - start);    start &#x3D; GetUsec();    double sum &#x3D; 0.0;    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii)    &#123;        sum +&#x3D; 0.5 * elements.mass[ii] * (elements.Velocity.x[ii] * elements.Velocity.x[ii] + elements.Velocity.y[ii] * elements.Velocity.y[ii] + elements.Velocity.z[ii] * elements.Velocity.z[ii]);    &#125;    finish &#x3D; GetUsec();    printf(&quot;sum &#x3D; %.8e,timing&#x3D;%ldus\n&quot;, sum, finish - start);    _aligned_free(elements.mass);    _aligned_free(elements.acct.x);    _aligned_free(elements.acct.y);    _aligned_free(elements.acct.z);    _aligned_free(elements.noused.x);    _aligned_free(elements.noused.y);    _aligned_free(elements.noused.z);    _aligned_free(elements.Velocity.x);    _aligned_free(elements.Velocity.y);    _aligned_free(elements.Velocity.z);    return 0;&#125;typedef struct&#123;    double *x;    double *y;    double *z;&#125; XYZ_SoA_Unrolling;typedef struct&#123;    double *mass;    XYZ_SoA_Unrolling acct;    XYZ_SoA_Unrolling noused; &#x2F;&#x2F; but here    XYZ_SoA_Unrolling Velocity;&#125; Element_SoA_Unrolling;int homework2_SoA_Unrolling() &#123;    Element_SoA_Unrolling elements;    elements.mass &#x3D; new double[ELEMENT_NUM];    elements.acct.x &#x3D; new double[ELEMENT_NUM];    elements.acct.y &#x3D; new double[ELEMENT_NUM];    elements.acct.z &#x3D; new double[ELEMENT_NUM];    elements.noused.x &#x3D; new double[ELEMENT_NUM];    elements.noused.y &#x3D; new double[ELEMENT_NUM];    elements.noused.z &#x3D; new double[ELEMENT_NUM];    elements.Velocity.x &#x3D; new double[ELEMENT_NUM];    elements.Velocity.y &#x3D; new double[ELEMENT_NUM];    elements.Velocity.z &#x3D; new double[ELEMENT_NUM];    srand(202403);    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ++ii) &#123;        elements.mass[ii] &#x3D; (double) (rand() % 10);        elements.acct.x[ii] &#x3D; (double) (rand() % 10) - 5.0;        elements.acct.y[ii] &#x3D; (double) (rand() % 10) - 5.0;        elements.acct.z[ii] &#x3D; (double) (rand() % 10) - 5.0;        elements.Velocity.x[ii] &#x3D; (double) (rand() % 10);        elements.Velocity.y[ii] &#x3D; (double) (rand() % 10);        elements.Velocity.z[ii] &#x3D; (double) (rand() % 10);    &#125;    size_t start &#x3D; GetUsec();    double dt &#x3D; 1.0;    &#x2F;&#x2F; Loop unrolling example    for (size_t step &#x3D; 0; step &lt; 10; ++step) &#123;        for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ii +&#x3D; 4) &#x2F;&#x2F; Increase by 4 due to unrolling        &#123;            elements.Velocity.x[ii] +&#x3D; dt * elements.acct.x[ii];            elements.Velocity.y[ii] +&#x3D; dt * elements.acct.y[ii];            elements.Velocity.z[ii] +&#x3D; dt * elements.acct.z[ii];            &#x2F;&#x2F; Unrolled operations            if (ii + 1 &lt; ELEMENT_NUM) &#123;                elements.Velocity.x[ii + 1] +&#x3D; dt * elements.acct.x[ii + 1];                elements.Velocity.y[ii + 1] +&#x3D; dt * elements.acct.y[ii + 1];                elements.Velocity.z[ii + 1] +&#x3D; dt * elements.acct.z[ii + 1];            &#125;            if (ii + 2 &lt; ELEMENT_NUM) &#123;                elements.Velocity.x[ii + 2] +&#x3D; dt * elements.acct.x[ii + 2];                elements.Velocity.y[ii + 2] +&#x3D; dt * elements.acct.y[ii + 2];                elements.Velocity.z[ii + 2] +&#x3D; dt * elements.acct.z[ii + 2];            &#125;            if (ii + 3 &lt; ELEMENT_NUM) &#123;                elements.Velocity.x[ii + 3] +&#x3D; dt * elements.acct.x[ii + 3];                elements.Velocity.y[ii + 3] +&#x3D; dt * elements.acct.y[ii + 3];                elements.Velocity.z[ii + 3] +&#x3D; dt * elements.acct.z[ii + 3];            &#125;        &#125;        dt &#x3D; dt * (((rand() % 10) &#x2F; 10.0) * 2.0);    &#125;    size_t finish &#x3D; GetUsec();    printf(&quot;muladd,timing&#x3D;%ldus\n&quot;, finish - start);    start &#x3D; GetUsec();    double sum &#x3D; 0.0;    for (size_t ii &#x3D; 0; ii &lt; ELEMENT_NUM; ii +&#x3D; 10) &#x2F;&#x2F; Loop unrolling for sum calculation    &#123;        sum +&#x3D; 0.5 * elements.mass[ii] * (elements.Velocity.x[ii] * elements.Velocity.x[ii]                                          + elements.Velocity.y[ii] * elements.Velocity.y[ii]                                          + elements.Velocity.z[ii] * elements.Velocity.z[ii]);        sum +&#x3D; 0.5 * elements.mass[ii + 1] * (elements.Velocity.x[ii + 1] * elements.Velocity.x[ii + 1]                                              + elements.Velocity.y[ii + 1] * elements.Velocity.y[ii + 1]                                              + elements.Velocity.z[ii + 1] * elements.Velocity.z[ii + 1]);        sum +&#x3D; 0.5 * elements.mass[ii + 2] * (elements.Velocity.x[ii + 2] * elements.Velocity.x[ii + 2]                                              + elements.Velocity.y[ii + 2] * elements.Velocity.y[ii + 2]                                              + elements.Velocity.z[ii + 2] * elements.Velocity.z[ii + 2]);        sum +&#x3D; 0.5 * elements.mass[ii + 3] * (elements.Velocity.x[ii + 3] * elements.Velocity.x[ii + 3]                                              + elements.Velocity.y[ii + 3] * elements.Velocity.y[ii + 3]                                              + elements.Velocity.z[ii + 3] * elements.Velocity.z[ii + 3]);    &#125;    finish &#x3D; GetUsec();    printf(&quot;sum &#x3D; %.8e,timing&#x3D;%ldus\n&quot;, sum, finish - start);    return 0;&#125;int main()&#123;    homework2();    homework2_SoA();    homework2_SoA_Align();    homework2_SoA_Unrolling();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国科大-高性能计算编程-作业一</title>
      <link href="/posts/4847.html"/>
      <url>/posts/4847.html</url>
      
        <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p><img src="/posts/4847.htm/image-20240306233915321.png" alt></p><h2 id="提交内容一：平台信息"><a href="#提交内容一：平台信息" class="headerlink" title="提交内容一：平台信息"></a>提交内容一：平台信息</h2><ul><li>本次作业在Windows平台及MacOs平台上均测试了homework1.cpp的运行，具体平台信息如下</li></ul><h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><ul><li><p>系统：Win11-23H2</p></li><li><p>CPU：i9-13900HX(x86)</p></li><li>内存：64G</li><li>IDE：CLion</li><li>编译器：MinGW</li></ul><h3 id="MacOs平台"><a href="#MacOs平台" class="headerlink" title="MacOs平台"></a>MacOs平台</h3><ul><li>系统：MacOs-14.3</li><li>CPU：M2(arm)</li><li>内存：16G</li><li>IDE：CLion</li><li>编译器：Clang</li></ul><h2 id="提交内容二：代码运行时间"><a href="#提交内容二：代码运行时间" class="headerlink" title="提交内容二：代码运行时间"></a>提交内容二：代码运行时间</h2><ul><li>本次作业分别在两个平台上使用-O0 -O1 -O2 -O3编译homework1.cpp,并记录四种优化条件下代码的运行时间，具体结果如下</li></ul><h3 id="Windows平台-1"><a href="#Windows平台-1" class="headerlink" title="Windows平台"></a>Windows平台</h3><h4 id="O0编译"><a href="#O0编译" class="headerlink" title="-O0编译"></a>-O0编译</h4><p><img src="/posts/4847.htm/12444bdc9e3a66b48edf26e8efcae454.png" alt></p><h4 id="O1编译"><a href="#O1编译" class="headerlink" title="-O1编译"></a>-O1编译</h4><p><img src="/posts/4847.htm/c523eae20a4ddaf3a073865654a78992.png" alt></p><h4 id="O2编译"><a href="#O2编译" class="headerlink" title="-O2编译"></a>-O2编译</h4><p><img src="/posts/4847.htm/5a5aeb01ad5712c337314e559c1fa50a.png" alt></p><h4 id="O3编译"><a href="#O3编译" class="headerlink" title="-O3编译"></a>-O3编译</h4><p><img src="/posts/4847.htm/e634aef3f0ba2b048ec500fab27db8cb.png" alt></p><h4 id="数据总览"><a href="#数据总览" class="headerlink" title="数据总览"></a>数据总览</h4><div class="table-container"><table><thead><tr><th>Win-MinGW</th><th>Vecadd Timing/us</th><th>Matrix Multiply Timing/us</th><th>Pi Timing/us</th></tr></thead><tbody><tr><td>-O0</td><td>3224</td><td>2557602</td><td>4074</td></tr><tr><td>-O1</td><td>2669</td><td>2310377</td><td>1001</td></tr><tr><td>-O2</td><td>2009</td><td>2344274</td><td>1017</td></tr><tr><td>-O3</td><td>2000</td><td>2358837</td><td>1651</td></tr></tbody></table></div><h3 id="MacOs平台-1"><a href="#MacOs平台-1" class="headerlink" title="MacOs平台"></a>MacOs平台</h3><h4 id="O0编译-1"><a href="#O0编译-1" class="headerlink" title="-O0编译"></a>-O0编译</h4><p><img src="/posts/4847.htm/13a5fc4e6287e95cf08abc9c8bbe6505.png" alt></p><h4 id="O1编译-1"><a href="#O1编译-1" class="headerlink" title="-O1编译"></a>-O1编译</h4><p><img src="/posts/4847.htm/87b1997bc9a004bcff994b65b2477981.png" alt></p><h4 id="O2编译-1"><a href="#O2编译-1" class="headerlink" title="-O2编译"></a>-O2编译</h4><p><img src="/posts/4847.htm/be642238c61cdc252b1d24bde92f56ef.png" alt></p><h4 id="O3编译-1"><a href="#O3编译-1" class="headerlink" title="-O3编译"></a>-O3编译</h4><p><img src="/posts/4847.htm/af136bfd3fc01163df251f67556127dd.png" alt></p><h4 id="数据总览-1"><a href="#数据总览-1" class="headerlink" title="数据总览"></a>数据总览</h4><div class="table-container"><table><thead><tr><th>Mac-Clang</th><th>Vecadd Timing/us</th><th>Matrix Multiply Timing/us</th><th>Pi Timing/us</th></tr></thead><tbody><tr><td>-O0</td><td>8858</td><td>6661187</td><td>6147</td></tr><tr><td>-O1</td><td>0</td><td>0</td><td>2358</td></tr><tr><td>-O2</td><td>0</td><td>1</td><td>2390</td></tr><tr><td>-O3</td><td>1</td><td>0</td><td>2592</td></tr></tbody></table></div><ul><li><strong>可以发现在Mac端，使用-O1及以上优化级别进行编译时，Vecadd Timing及Matrix Multiply Timing均为0us或1us，因此可能是这两个函数根本没被运行。查看代码发现，原实验代码中Vecadd和Matrix Multiply函数计算完c[1024*1024]及cc[1024*1024]后，这两个数组都没有再被使用过，因此可能是Clang编译器识别到这一情况后直接将这两个函数视为无用代码在编译时进行了删除。因此修改源代码，在计算完c[1024*1024]及cc[1024*1024]后分别输出一下c[0]，让编译器在编译时不删除这两个函数的内容。以下是修改源代码后再次测试的结果</strong></li></ul><h3 id="MacOs平台修改源码后再次测试"><a href="#MacOs平台修改源码后再次测试" class="headerlink" title="MacOs平台修改源码后再次测试"></a>MacOs平台修改源码后再次测试</h3><h4 id="O1编译-2"><a href="#O1编译-2" class="headerlink" title="-O1编译"></a>-O1编译</h4><p><img src="/posts/4847.htm/f5af0b993fd04995716e55c7ccc31cb2.png" alt></p><h4 id="O2编译-2"><a href="#O2编译-2" class="headerlink" title="-O2编译"></a>-O2编译</h4><p><img src="/posts/4847.htm/f2cdaa4baf465e1752eee660f9b91cfc.png" alt></p><h4 id="O3编译-2"><a href="#O3编译-2" class="headerlink" title="-O3编译"></a>-O3编译</h4><p><img src="/posts/4847.htm/558de44e3d2b51670719bacb6e5f8992.png" alt></p><h4 id="数据总览-2"><a href="#数据总览-2" class="headerlink" title="数据总览"></a>数据总览</h4><div class="table-container"><table><thead><tr><th>Mac-Clang</th><th>Vecadd Timing/us</th><th>Matrix Multiply Timing/us</th><th>Pi Timing/us</th></tr></thead><tbody><tr><td>-O0</td><td>8858</td><td>6661187</td><td>6147</td></tr><tr><td>-O1</td><td>6532</td><td>2105799</td><td>1745</td></tr><tr><td>-O2</td><td>5817</td><td>2105989</td><td>1564</td></tr><tr><td>-O3</td><td>2585</td><td>2104009</td><td>1601</td></tr></tbody></table></div><h2 id="提交内容三：优化方法分析"><a href="#提交内容三：优化方法分析" class="headerlink" title="提交内容三：优化方法分析"></a>提交内容三：优化方法分析</h2><ul><li>以Windows平台，Vecadd函数为例进行分析</li></ul><h3 id="O0"><a href="#O0" class="headerlink" title="-O0"></a>-O0</h3><ul><li>不进行任何优化</li></ul><h3 id="O1"><a href="#O1" class="headerlink" title="-O1"></a>-O1</h3><ul><li>在 -O0中，vecadd 函数的循环是这样的：</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.L7:  movq    -8(%rbp), %rax  cmpq    40(%rbp), %rax  jnb     .L6  movq    -8(%rbp), %rax  leaq    0(,%rax,8), %rdx  movq    16(%rbp), %rax  addq    %rdx, %rax  movsd   (%rax), %xmm1  movq    -8(%rbp), %rax  leaq    0(,%rax,8), %rdx  movq    24(%rbp), %rax  addq    %rdx, %rax  movsd   (%rax), %xmm0  movq    -8(%rbp), %rax  leaq    0(,%rax,8), %rdx  movq    32(%rbp), %rax  addq    %rdx, %rax  addsd   %xmm1, %xmm0  movsd   %xmm0, (%rax)  addq    $1, -8(%rbp)  jmp     .L7.L6:  movl    $0, %eax  addq    $16, %rsp  popq    %rbp  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 -O1中，vecadd 函数的循环是这样的：</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.L5:  movsd  (%rcx,%rax,8), %xmm0  addsd  (%rdx,%rax,8), %xmm0  movsd  %xmm0, (%r8,%rax,8)  addq    $1, %rax  cmpq    %rax, %r9  jne     .L5.L4:  movl    $0, %eax  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>循环展开</strong>：在 -O1 中，循环体被简化了。在 -O0 中，我们看到了对索引的计算(<code>leaq    0(,%rax,8), %rdx</code>)，然后使用这个索引来访问数组。在 -O1 中，这个计算被直接内联到循环体中，减少了对寄存器的依赖和循环控制的开销。</li><li><strong>寄存器使用</strong>：在 -O1 中，编译器对寄存器的使用进行了优化，相比于-O0更加高效</li><li><strong>循环简化</strong>：在 -O1 中，循环控制（<code>addq    $1, %rax</code> ,<code>cmpq    %rax, %r9</code>）和条件跳转（<code>jne     .L5</code>）相较于-O0中的代码而言更加简化，这有助于提高循环的执行效率。</li></ul><h3 id="O2"><a href="#O2" class="headerlink" title="-O2"></a>-O2</h3><ul><li>-O2的vecadd函数基本与-O1中一样，证明-O1已经对该函数进行了足够的简化，或该函数较为简单，无须再次优化</li></ul><h3 id="O3"><a href="#O3" class="headerlink" title="-O3"></a>-O3</h3><ul><li><p>在 -O2中，vecadd 函数的汇编代码是这样的：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.L6:  movsd  (%rcx,%rax,8), %xmm0  addsd  (%rdx,%rax,8), %xmm0  movsd  %xmm0, (%r8,%rax,8)  addq    $1, %rax  cmpq    %rax, %r9  jne     .L6.L5:  xorl    %eax, %eax  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 -O3中，vecadd 函数的汇编代码是这样的：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.L7:  movq    (%rcx,%rax), %xmm0  movq    (%rdx,%rax), %xmm1  movhpd  8(%rcx,%rax), %xmm0  movhpd  8(%rdx,%rax), %xmm1  addpd   %xmm1, %xmm0  movlpd  %xmm0, (%r8,%rax)  movhpd  %xmm0, 8(%r8,%rax)  addq    $16, %rax  cmpq    %rax, %r10  jne     .L7  movq    %r9, %rax  andq    $-2, %rax  cmpq    %rax, %r9  je      .L5  movsd   (%rcx,%rax,8), %xmm0  addsd  (%rdx,%rax,8), %xmm0  movsd   %xmm0, (%r8,%rax,8).L5:  xorl    %eax, %eax  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>向量化操作</strong>：在 -O3 中，编译器添加了 movhpd 指令的使用，这表明编译器可能在尝试利用 SSE2 指令集进行向量化操作。这可以显著提高数据处理的效率，因为它允许同时处理多个数据。</p></li><li><strong>循环展开</strong>：在 -O3 中，循环体被进一步展开，以减少循环控制的开销。例如，movhpd 指令用于同时加载和存储两个双字（64位）浮点数，这减少了内存访问次数。</li><li><strong>条件分支优化</strong>：在 -O3 中，编译器对条件分支进行了优化，例如通过使用 setnb 和 seta 指令来优化条件跳转。这有助于提高分支预测的准确性。</li><li><strong>循环控制逻辑</strong>：在 -O3 中，循环控制逻辑更加复杂，这表明编译器可能在尝试更精细地控制循环的执行，以减少不必要的计算和内存访问。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>-O0：不进行优化</li><li>-O1：主要对代码的分支、表达式、循环体等进行优化</li><li>-O2：尝试更多的寄存器级和汇编指令级的优化，增大调试难度</li><li>-O3：在O2的基础上对循环体等进行更多精细、激进的优化，可能会使汇编代码的逻辑更加复杂，加大精度的同时可能会增大运行时间及调试难度</li><li>Clang编译器的优化更为激进，会删除不影响程序运行的代码段(例如定义后未使用的变量等)，因此在本次作业中需要修改源代码才能进行运行时间的测量，否则编译器会直接删除main函数中Vecadd以及Matrix Multiply函数的调用</li></ul><h2 id="自评分及理由"><a href="#自评分及理由" class="headerlink" title="自评分及理由"></a>自评分及理由</h2><h3 id="自评分"><a href="#自评分" class="headerlink" title="自评分"></a>自评分</h3><ul><li>10分</li></ul><h3 id="评分理由"><a href="#评分理由" class="headerlink" title="评分理由"></a>评分理由</h3><ul><li>在Windows及MacOs双平台完成作业</li><li>收集双平台数据并绘制总览图表</li><li>根据汇编代码进行不同优化级别的优化方法分析</li><li>分析Clang(Mac)进行-O1以上级别的编译时代码运行时间为0的原因</li><li>对比分析MinGW(Win)及Clang(Mac)的优化策略</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年国科大杨力祥《高级操作系统》期末思考题汇总</title>
      <link href="/posts/22763.html"/>
      <url>/posts/22763.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？"><a href="#1-为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？" class="headerlink" title="1.为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？"></a>1.为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？</h3><p>因为刚开始启动计算机的时候，计算机的内存还没有初始化。由于CPU只能执行内存中的代码，因此需要把操作系统从软盘或硬盘中加载到内存上。这就需要硬件主动加载BIOS程序，由BIOS准备好中断向量表和中断服务程序，接着通过中断将引导程序bootsect加载到内存里。再通过后续的一系列执行，操作系统的代码才能位于内存中，供CPU执行。</p><h3 id="2-为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？"><a href="#2-为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？" class="headerlink" title="2.为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？"></a>2.为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？</h3><p>因为操作系统和BIOS通常是由不同的团队进行开发的。为了能够协调工作，双方按照固定的约定进行代码的开发。对于BIOS来说，它接收到启动命令后就将启动扇区的代码加载至0x07c00（BOOTSEG）处，至于启动扇区里的内容是什么，BIOS一概不管。而后续的代码则由操作系统自己的bootsect代码进行加载，这些代码由编写操作系统的团队负责。这样构建可以让BIOS和操作系统的设计团队按照自己的意愿进行代码设计，使内存规划更加灵活。如果BIOS直接把所有需要加载的扇区一次性进行加载，可能会出现以下问题：①不同的操作系统代码长度不一样，由BIOS进行操作系统的加载可能会导致系统加载不完全②如果使用BIOS进行加载，等待系统加载完毕后再执行，则需要等待较长的时间，因此Linux采用的就是边加载边执行的方法</p><h3 id="3-为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？"><a href="#3-为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？" class="headerlink" title="3.为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？"></a>3.为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？</h3><p>有以下几个原因：</p><p>①BIOS在0x00000开始的位置构建起了中断向量表，暂时不能被覆盖，因此不能把bootsect加载到0x00000位置</p><p>②bootsect运行时产生的数据有些需要进行保存以供后续使用，而之后拷贝内核system时会将0x07c00处覆盖，造成数据的丢失，因此需要将该bootsect挪到0x90000处</p><p>③加载到0x07c00位置是历史约定，不是bootsect能够决定的，因此只能由bootsect在运行时把自己拷贝到0x90000处</p><h3 id="4-bootsect、setup、head程序之间是怎么衔接的？给出代码证据。"><a href="#4-bootsect、setup、head程序之间是怎么衔接的？给出代码证据。" class="headerlink" title="4.bootsect、setup、head程序之间是怎么衔接的？给出代码证据。"></a>4.bootsect、setup、head程序之间是怎么衔接的？给出代码证据。</h3><p>①bootsect将setup加载到0x90200处</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">INITSEG  <span class="token operator">=</span> <span class="token number">0x9000</span><span class="token operator">!</span> we move boot here <span class="token operator">-</span> out of the wayjmpigo<span class="token punctuation">,</span>INITSEG<span class="token operator">!</span> 修改 csgo<span class="token operator">:</span>movax<span class="token punctuation">,</span>csmovds<span class="token punctuation">,</span>axmoves<span class="token punctuation">,</span>axload_setup<span class="token operator">:</span>movdx<span class="token punctuation">,</span>#<span class="token number">0x0000</span><span class="token operator">!</span> drive <span class="token number">0</span><span class="token punctuation">,</span> head <span class="token number">0</span>movcx<span class="token punctuation">,</span>#<span class="token number">0x0002</span><span class="token operator">!</span> sector <span class="token number">2</span><span class="token punctuation">,</span> track <span class="token number">0</span>movbx<span class="token punctuation">,</span>#<span class="token number">0x0200</span><span class="token operator">!</span> address <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> in INITSEGmovax<span class="token punctuation">,</span>#<span class="token number">0x0200</span><span class="token operator">+</span>SETUPLEN<span class="token operator">!</span> service <span class="token number">2</span><span class="token punctuation">,</span> nr of sectors<span class="token keyword">int</span><span class="token number">0x13</span><span class="token operator">!</span> read itjncok_load_setup<span class="token operator">!</span> ok <span class="token operator">-</span> <span class="token keyword">continue</span>movdx<span class="token punctuation">,</span>#<span class="token number">0x0000</span>movax<span class="token punctuation">,</span>#<span class="token number">0x0000</span><span class="token operator">!</span> reset the diskette<span class="token keyword">int</span><span class="token number">0x13</span>jload_setup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②bootsect将system加载到0x10000处</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SYSSIZE <span class="token operator">=</span> <span class="token number">0x3000</span>SYSSEG   <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token operator">!</span> system loaded at <span class="token number">0x10000</span> <span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ENDSEG   <span class="token operator">=</span> SYSSEG <span class="token operator">+</span> SYSSIZE<span class="token operator">!</span> where to stop loadingmovax<span class="token punctuation">,</span>#SYSSEGmoves<span class="token punctuation">,</span>ax<span class="token operator">!</span> segment of <span class="token number">0x010000</span>callread_itread_it<span class="token operator">:</span>mov ax<span class="token punctuation">,</span>estest ax<span class="token punctuation">,</span>#<span class="token number">0x0fff</span><span class="token operator">!</span> <span class="token number">64</span>KB 对齐die<span class="token operator">:</span>jne die<span class="token operator">!</span> es must be at <span class="token number">64</span>kB boundaryxor bx<span class="token punctuation">,</span>bx<span class="token operator">!</span> bx is starting address within segmentrp_read<span class="token operator">:</span>mov ax<span class="token punctuation">,</span>escmp ax<span class="token punctuation">,</span>#ENDSEG<span class="token operator">!</span> have we loaded all yet<span class="token operator">?</span>jb ok1_readretok1_read<span class="token operator">:</span>seg csmov ax<span class="token punctuation">,</span>sectors<span class="token operator">!</span> 每磁道扇区数sub ax<span class="token punctuation">,</span>sread<span class="token operator">!</span> 当前磁道已读扇区数mov cx<span class="token punctuation">,</span>axshl cx<span class="token punctuation">,</span>#<span class="token number">9</span><span class="token operator">!</span> 计算一共有多少个字节 <span class="token punctuation">(</span><span class="token operator">*</span><span class="token number">512</span><span class="token punctuation">)</span> 以下是用来判断是否超过 <span class="token number">64</span>KB，真正有用的是 axadd cx<span class="token punctuation">,</span>bx<span class="token operator">!</span> 段内当前偏移值jnc ok2_readje ok2_read<span class="token operator">!</span> 没有超过 <span class="token number">64</span>KBxor ax<span class="token punctuation">,</span>axsub ax<span class="token punctuation">,</span>bx<span class="token operator">!</span> 计算此时最多能读入的字节数shr ax<span class="token punctuation">,</span>#<span class="token number">9</span>ok2_read<span class="token operator">:</span>call read_trackmov cx<span class="token punctuation">,</span>ax<span class="token operator">!</span> 该次操作读取的扇区数add ax<span class="token punctuation">,</span>sread<span class="token operator">!</span> 当前磁道已读扇区数seg cscmp ax<span class="token punctuation">,</span>sectorsjne ok3_read<span class="token operator">!</span> 如果当前磁道还有扇区未读，则跳转到 ok3_readmov ax<span class="token punctuation">,</span>#<span class="token number">1</span>sub ax<span class="token punctuation">,</span>headjne ok4_read<span class="token operator">!</span> 如果是 <span class="token number">0</span> 磁头，则去读 <span class="token number">1</span> 磁头面上的扇区数据inc track<span class="token operator">!</span> 否则去读下一磁道ok4_read<span class="token operator">:</span>mov head<span class="token punctuation">,</span>axxor ax<span class="token punctuation">,</span>ax<span class="token operator">!</span> 清零当前已读扇区数ok3_read<span class="token operator">:</span>mov sread<span class="token punctuation">,</span>axshl cx<span class="token punctuation">,</span>#<span class="token number">9</span>add bx<span class="token punctuation">,</span>cx<span class="token operator">!</span> 调整当前段内数据开始的位置jnc rp_readmov ax<span class="token punctuation">,</span>esadd ax<span class="token punctuation">,</span>#<span class="token number">0x1000</span>mov es<span class="token punctuation">,</span>axxor bx<span class="token punctuation">,</span>bxjmp rp_readread_track<span class="token operator">:</span>push axpush bxpush cxpush dxmov dx<span class="token punctuation">,</span>track<span class="token operator">!</span> 当前磁道号mov cx<span class="token punctuation">,</span>sread<span class="token operator">!</span> 当前磁道已读扇区数inc cx<span class="token operator">!</span> 从下一扇区开始读mov ch<span class="token punctuation">,</span>dlmov dx<span class="token punctuation">,</span>head<span class="token operator">!</span> 当前磁头号mov dh<span class="token punctuation">,</span>dlmov dl<span class="token punctuation">,</span>#<span class="token number">0</span>and dx<span class="token punctuation">,</span>#<span class="token number">0x0100</span>mov ah<span class="token punctuation">,</span>#<span class="token number">2</span><span class="token keyword">int</span> <span class="token number">0x13</span>jc bad_rtpop dxpop cxpop bxpop axretbad_rt<span class="token operator">:</span>mov ax<span class="token punctuation">,</span>#<span class="token number">0</span><span class="token operator">!</span> 执行驱动器复位操作mov dx<span class="token punctuation">,</span>#<span class="token number">0</span><span class="token keyword">int</span> <span class="token number">0x13</span>pop dxpop cxpop bxpop axjmp read_track<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③bootsect跳转到setup处</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SETUPSEG <span class="token operator">=</span> <span class="token number">0x9020</span><span class="token operator">!</span> setup starts herejmpi<span class="token number">0</span><span class="token punctuation">,</span>SETUPSEG<span class="token operator">!</span> 跳转到 setup<span class="token punctuation">.</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>④setup将system移动到0x00000处</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">movax<span class="token punctuation">,</span>#<span class="token number">0x0000</span>cld<span class="token operator">!</span> <span class="token char">'direction'</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> movs moves forwarddo_move<span class="token operator">:</span>moves<span class="token punctuation">,</span>ax<span class="token operator">!</span> destination segmentaddax<span class="token punctuation">,</span>#<span class="token number">0x1000</span>cmpax<span class="token punctuation">,</span>#<span class="token number">0x9000</span>jzend_movemovds<span class="token punctuation">,</span>ax<span class="token operator">!</span> source segmentsubdi<span class="token punctuation">,</span>disubsi<span class="token punctuation">,</span>simov cx<span class="token punctuation">,</span>#<span class="token number">0x8000</span>repmovswjmpdo_move<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤setup加载GDT，令内核代码段基址指向第一条指令，即0x0处</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">!</span> 内核代码段<span class="token punctuation">.</span>word<span class="token number">0x07FF</span><span class="token operator">!</span> <span class="token number">8</span>Mb <span class="token operator">-</span> limit<span class="token operator">=</span><span class="token number">2047</span> <span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span><span class="token number">4096</span><span class="token operator">=</span><span class="token number">8</span>Mb<span class="token punctuation">)</span><span class="token punctuation">.</span>word<span class="token number">0x0000</span><span class="token operator">!</span> base address<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span>word<span class="token number">0x9A00</span><span class="token operator">!</span> code read<span class="token operator">/</span>exec<span class="token punctuation">.</span>word<span class="token number">0x00C0</span><span class="token operator">!</span> granularity<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">386</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥setup进入保护模式，通过内核代码段选择子和偏移量跳转到head</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">jmpi<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token operator">!</span> jmp offset <span class="token number">0</span> of segment <span class="token number">8</span> <span class="token punctuation">(</span>cs<span class="token punctuation">)</span>进入 head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-setup程序的最后是jmpi-0-8-，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？"><a href="#5-setup程序的最后是jmpi-0-8-，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？" class="headerlink" title="5.setup程序的最后是jmpi 0,8 ，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？"></a>5.setup程序的最后是jmpi 0,8 ，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？</h3><p>因为此时已经进入了保护模式，这里的0和8代表的是段内偏移量和段选择子。根据段选择子的规则，这里的8应该看做二进制的1000，其中最后两个字符“00”表示内核特权级，第二个字符“0”表示选择GDT表，第一个字符“1”表示所选择的表的第一项，即GDT表的第一项，由此来确定代码段的段基址和段限长，由此可以得到这段代码的意思是从0x00000000位置，偏移量为0处开始执行，即head的起始位置</p><h3 id="6-保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？为什么特权级是基于段的？"><a href="#6-保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？为什么特权级是基于段的？" class="headerlink" title="6.保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？为什么特权级是基于段的？"></a>6.保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？为什么特权级是基于段的？</h3><p>①打开了保护模式后，CPU的寻址模式发生了变化，需要依赖于GDT去获取代码或数据段的基址。从GDT可以看出，保护模式除了段基址外，还有段限长，这样相当于增加了一个段位寄存器。既有效地防止了对代码或数据段的覆盖，又防止了代码段自身的访问超限，明显增强了保护作用。<br>②体现：①在GDT、LDT及IDT中，均有自己界限特、权级等属性，这是对描述符所描述的对象的保护；②在不同特权级间访问时，系统会对CPL、RPL、DPL、IOPL 等进行检验，对不同层级的程序进行保护，同还限制某些特殊指令的使用，如 lgdt, lidt,cli等。<br>③特权级的目的和意义：①为了更好的管理资源并保护系统不受侵害，操作系统利用先机，以时间换取特权，先霸占所有特权；②依托CPU提供的保护模式，着眼于“段”，在所有的段选择符最后两位标示特权级，禁止用户执行cli、sti等对掌控局面至关重要的指令。③操作系统可以把内核设计成最高特权级，把用户进程设计成最低特权级。这样，操作系统可以访问 GDT、LDT、TR，而 GDT、LDT是逻辑地址形成线性地址的关键，因此操作系统可以掌控线性地址。物理地址是由内核将线性地址转换而成的，所以操作系统可以访问任何物理地址，而用户进程只能使用逻辑地址。<br>④分页机制中PDE和PTE中的R/W和U/S等，提供了页级保护；分页机制将线性地址与物理地址加以映射，提供了对物理地址的保护；通过分页机制，每个进程都有自己的专属页表，有利于更安全、高效的使用内存，保护每个进程的地址空间。</p><p>⑤在操作系统设计中，一个段一般实现的功能相对完整，可以把代码放在一个段，数据放在一个段，并通过段选择符（包括CS、SS、DS、ES、Fs和GS）获取段的基址和特权级等信息。通过段，系统划分了内核代码段、内核数据段、用户代码段和用户数据段等不同的数据段，有些段是系统专享的，有些是和用户程序共享的，因此就有特权级的概念。特权级基于段，这样当段选择子具有不匹配的特权级时，按照特权级规则评判是否可以访问。特权级基于段，是结合了程序的特点和硬件实现的一种考虑。</p><h3 id="7-在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？"><a href="#7-在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？" class="headerlink" title="7.在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？"></a>7.在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？</h3><p>原来GDT所在的位置是设计代码时在setup.s里面设置的数据，将来这个setup模块所在的内存位置会在设计缓冲区时被覆盖。如果不改变位置，将来GDT的内容肯定会被缓冲区覆盖掉，从而影响系统的运行。这样一来，将来整个内存空间中唯一安全的地方就是现在head.s所在的位置了。<br>不能在执行setup程序时直接把GDT的内容复制到head.s所在位置：如果先复制GDT内容，后移动system模块，它就会被后者覆盖；如果先移动system模块，后复制GDT内容，它又会把head.s对应的程序覆盖，而这时head.s还没有执行。所以无论如何都要重新建立GDT。</p><h3 id="8-内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个个页表的前7个页表项指向什么位置？给出代码证据。"><a href="#8-内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个个页表的前7个页表项指向什么位置？给出代码证据。" class="headerlink" title="8.内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个个页表的前7个页表项指向什么位置？给出代码证据。"></a>8.内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个个页表的前7个页表项指向什么位置？给出代码证据。</h3><p>①head.s在setup_paging开始创建分页机制。将页目录表和4个页表放到物理内存的起始位置，从内存起始位置开始的5个页空间内容全部清零（每页4kb），然后设置页目录表的前4项，使之分别指向4个页表。然后开始从高地址向低地址方向填写4个页表，依次指向内存从高地址向低地址方向的各个页面。即将第4个页表的最后一项（pg3+4092指向的位置）指向寻址范围的最后一个页面。即从0xFFF000开始的4kb 大小的内存空间。将第4个页表的倒数第二个页表项（pg3-4+4092）指向倒数第二个页面，即0xFFF000-0x1000开始的4KB字节的内存空间，依此类推。</p><p>②</p><p><img src="/posts/22763.htm/image-20231223120616068.png" alt></p><p>③Head.s中完成页表项与页面的挂接，是从高地址向低地址方向完成挂接的，16M内存全部完成挂接（页表从0开始，即页表0-页表3）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">setup_paging<span class="token operator">:</span> movl $<span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">%</span>ecx  <span class="token comment">/* 5 pages - pg_dir+4 page tables */</span> xorl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax xorl <span class="token operator">%</span>edi<span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token comment">/* pg_dir is at 0x000 */</span> cld<span class="token punctuation">;</span>rep<span class="token punctuation">;</span>stosl movl $pg0<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>pg_dir  <span class="token comment">/* set present bit/user r/w */</span>  movl $pg1<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>pg_dir<span class="token operator">+</span><span class="token number">4</span>  <span class="token comment">/*  --------- " " --------- */</span> movl $pg2<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>pg_dir<span class="token operator">+</span><span class="token number">8</span>  <span class="token comment">/*  --------- " " --------- */</span>  movl $pg3<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>pg_dir<span class="token operator">+</span><span class="token number">12</span>  <span class="token comment">/*  --------- " " --------- */</span> _pg_dir用于表示内核分页机制完成后的内核起始位置，也就是物理内存的起始位置<span class="token number">0x000000</span>，以上四句完成页目录表的前四项与页表<span class="token number">1</span>，<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>的挂接 movl $pg3<span class="token operator">+</span><span class="token number">4092</span><span class="token punctuation">,</span><span class="token operator">%</span>edi movl $<span class="token number">0xfff007</span><span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token comment">/*  16Mb - 4096 + 7 (r/w user,p) */</span> std <span class="token number">1</span><span class="token operator">:</span> stosl   <span class="token comment">/* fill pages backwards - more efficient :-) */</span> subl $<span class="token number">0x1000</span><span class="token punctuation">,</span><span class="token operator">%</span>eaxjge <span class="token number">1</span>bxorl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax<span class="token comment">/* pg_dir is at 0x0000 */</span>movl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>cr3<span class="token comment">/* cr3 - page directory start */</span>movl <span class="token operator">%</span>cr0<span class="token punctuation">,</span><span class="token operator">%</span>eaxorl $<span class="token number">0x80000000</span><span class="token punctuation">,</span><span class="token operator">%</span>eaxmovl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>cr0<span class="token comment">/* set paging (PG) bit */</span>ret<span class="token comment">/* this also flushes prefetch-queue */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-根据内核分页为线性地址恒等映射的要求，推导出四个页表的映射公式，写出页表的设置代码。"><a href="#9-根据内核分页为线性地址恒等映射的要求，推导出四个页表的映射公式，写出页表的设置代码。" class="headerlink" title="9.根据内核分页为线性地址恒等映射的要求，推导出四个页表的映射公式，写出页表的设置代码。"></a>9.根据内核分页为线性地址恒等映射的要求，推导出四个页表的映射公式，写出页表的设置代码。</h3><p>内核分页采用线性地址恒等映射。内核的段基址是0，代码段和数据段的段限长都是16 MB。每个页面大小为4 KB，每个页表可以管理1024个页面，每个页目录表可以管理1024个页表。既然确定了段限长是16 MB，这样就需要4个页目录项（attention：只用了四个页目录项管理4个页表）下辖4个页表，来管理这16 MB的内存</p><p><img src="/posts/22763.htm/image-20231224200141195.png" alt></p><p>页表设置代码：(内核分页采用恒等映射模式，调用get_free_page( )函数后，获取的线性地址值直接就可以当物理地址来用)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//代码路径：boot/head.s:</span>…setup_paging<span class="token operator">:</span>      movl $<span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">%</span>ecx            <span class="token comment">/* 5 pages - pg_dir + 4 page tables */</span>      xorl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax      xorl <span class="token operator">%</span>edi<span class="token punctuation">,</span><span class="token operator">%</span>edi                       <span class="token comment">/* pg_dir is at 0x000 */</span>      cld<span class="token punctuation">;</span>rep<span class="token punctuation">;</span>stosl      movl $pg0 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>_pg_dir                <span class="token comment">/* set present bit/user r/w */</span>      movl $pg1 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>_pg_dir <span class="token operator">+</span> <span class="token number">4</span>    <span class="token comment">/*  --------- " " --------- */</span>      movl $pg2 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>_pg_dir <span class="token operator">+</span> <span class="token number">8</span>    <span class="token comment">/*  --------- " " --------- */</span>      movl $pg3 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>_pg_dir <span class="token operator">+</span> <span class="token number">12</span>  <span class="token comment">/*  --------- " " --------- */</span>      movl $pg3 <span class="token operator">+</span> <span class="token number">4092</span><span class="token punctuation">,</span><span class="token operator">%</span>edi      movl $<span class="token number">0xfff007</span><span class="token punctuation">,</span><span class="token operator">%</span>eax          <span class="token comment">/*  16Mb -4096 + 7 (r/w user,p) */</span>      std<span class="token number">1</span><span class="token operator">:</span> stosl                          <span class="token comment">/* fill pages backwards - more efficient :-) */</span>      subl $<span class="token number">0x1000</span><span class="token punctuation">,</span><span class="token operator">%</span>eax      jge <span class="token number">1</span>b…<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。"><a href="#10-为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。" class="headerlink" title="10.为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。"></a>10.为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。</h3><p>call指令会将EIP的值自动压栈，保护返回现场，然后执行被调用函数的程序，等执行到函数的ret指令时，自动出栈给EIP返回调用前的现场，而后继续执行call的下一条指令。然而由于操作系统是机器运行时逻辑上最底层的代码，因此如果使用call来调用操作系统的main函数，那么执行到ret时没有一个更底层的函数来接收操作系统的返回。而如果使用ret来实现调用main函数的操作则不需要再返回了。要想用ret来模拟call指令调用main函数，则需要手动编写压栈和跳转动作的代码。</p><p>调用路线如图：</p><p><img src="/posts/22763.htm/image-20231221222053356.png" alt></p><p>代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">after_page_tables<span class="token operator">:</span>pushl $<span class="token number">0</span># These are the parameters to main <span class="token operator">:</span><span class="token operator">-</span><span class="token punctuation">)</span>envppushl $<span class="token number">0</span># argvpushl $<span class="token number">0</span># argcpushl $L6# <span class="token keyword">return</span> address <span class="token keyword">for</span> main<span class="token punctuation">,</span> <span class="token keyword">if</span> it decides to<span class="token punctuation">.</span>pushl $_main# kernel 的 main 函数地址jmp setup_pagingL6<span class="token operator">:</span>jmp L6# main should never <span class="token keyword">return</span> here<span class="token punctuation">,</span> but<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">just</span> <span class="token expression">in <span class="token keyword">case</span><span class="token punctuation">,</span> we know what happens<span class="token punctuation">.</span></span></span>setup_paging<span class="token operator">:</span><span class="token comment">// 内核分页，分完以后 线性地址 == 物理地址</span><span class="token comment">// ...</span>ret<span class="token comment">/* this also flushes prefetch-queue */</span><span class="token comment">// 我们是操作系统的底层，所以要返回到 kernel 中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、计算内核代码段、数据段的段基址、段限长、特权级。"><a href="#11、计算内核代码段、数据段的段基址、段限长、特权级。" class="headerlink" title="11、计算内核代码段、数据段的段基址、段限长、特权级。"></a>11、计算内核代码段、数据段的段基址、段限长、特权级。</h3><p>在 Linux 0.11 中，内核代码段和数据段的段基址实际上是相同的，都是 0x00000000；代码段和数据段的段限长均设置为16 MB；特权级为0特权级</p><h3 id="12、计算进程0的代码段、数据段的段基址、段限长、特权级。"><a href="#12、计算进程0的代码段、数据段的段基址、段限长、特权级。" class="headerlink" title="12、计算进程0的代码段、数据段的段基址、段限长、特权级。"></a>12、计算进程0的代码段、数据段的段基址、段限长、特权级。</h3><p>在 Linux 0.11 中，进程0的代码段和数据段的段基址都是 0x00000000；代码段和数据段的段限长均设置为160*4KB=640KB；特权级为0特权级</p><h3 id="13、fork进程1之前，为什么先调用move-to-user-mode-？用的是什么方法？解释其中的道理。"><a href="#13、fork进程1之前，为什么先调用move-to-user-mode-？用的是什么方法？解释其中的道理。" class="headerlink" title="13、fork进程1之前，为什么先调用move_to_user_mode()？用的是什么方法？解释其中的道理。"></a>13、fork进程1之前，为什么先调用move_to_user_mode()？用的是什么方法？解释其中的道理。</h3><p>①因为在Linux-011中，规定除了进程0以外的所有进程，都必须在特权级为3即用户模式中开始执行。所以进程0 fork进程1之前，要调用move_to_user_mode()将0特权级翻转到3特权级。<br>②move_to_user_mode()使用的方法是模仿中断的硬件压栈，将ss、esp、eflags、cs、eip按顺序压栈，然后执行iret从内核模式返回，出栈恢复现场，从而翻转0特权级到3特权级。<br>③CPU响应中断的时候，根据DPL的设置，可以实现指定的特权级之间的翻转。所以模拟中断硬件压栈可以实现特权级的翻转。</p><h3 id="14、根据什么判定move-to-user-mode-中iret之后的代码为进程0的代码。"><a href="#14、根据什么判定move-to-user-mode-中iret之后的代码为进程0的代码。" class="headerlink" title="14、根据什么判定move_to_user_mode()中iret之后的代码为进程0的代码。"></a>14、根据什么判定move_to_user_mode()中iret之后的代码为进程0的代码。</h3><p>iret 指令将CPU状态从内核模式切换到用户模式。iret之后的代码目的是为了设置用户模式下的各种寄存器。move_to_user_mode 是在系统初始化的最后阶段调用的，且此时系统中只有进程0存在，进程1还未创建。因此iret指令之后的代码仍然是属于进程0的。</p><h3 id="15、进程0的task-struct在哪？具体内容是什么？给出代码证据。"><a href="#15、进程0的task-struct在哪？具体内容是什么？给出代码证据。" class="headerlink" title="15、进程0的task_struct在哪？具体内容是什么？给出代码证据。"></a>15、进程0的task_struct在哪？具体内容是什么？给出代码证据。</h3><p>①进程0的task_struct是操作系统设计者事先设计好的，位于内核数据区。<br>②进程0的task_struct 的具体内容包含了进程0的状态、信号、pid、alarm、ldt、tss等管理该进程所需的数据。<br>③代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 进程0的task_struct</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INIT_TASK</span> <span class="token punctuation">\</span><span class="token comment">/* state etc */</span><span class="token expression"><span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* signals */</span><span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* ec,brk... */</span><span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* pid etc.. */</span><span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* uid etc */</span><span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* alarm */</span><span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* math */</span><span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* fs info */</span><span class="token expression"><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0022</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* filp */</span><span class="token expression"><span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/* ldt */</span><span class="token expression"><span class="token punctuation">&#123;</span><span class="token number">0x9f</span><span class="token punctuation">,</span><span class="token number">0xc0fa00</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span><span class="token number">0x9f</span><span class="token punctuation">,</span><span class="token number">0xc0f200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token comment">/*tss*/</span><span class="token expression"><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>PAGE_SIZE<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>init_task<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pg_dir<span class="token punctuation">,</span></span><span class="token punctuation">\</span> <span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span> <span class="token expression"><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span> <span class="token expression"><span class="token function">_LDT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x80000000</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16、在system-h里，有以下代码。读懂代码。这里中断门、陷阱门、系统调用都是通过-set-gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。"><a href="#16、在system-h里，有以下代码。读懂代码。这里中断门、陷阱门、系统调用都是通过-set-gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。" class="headerlink" title="16、在system.h里，有以下代码。读懂代码。这里中断门、陷阱门、系统调用都是通过_set_gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。"></a>16、在system.h里，有以下代码。读懂代码。这里中断门、陷阱门、系统调用都是通过_set_gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _set_gate(gate_addr,type,dpl,addr) \__asm__ (&quot;movw %%dx,%%ax\n\t&quot; \    &quot;movw %0,%%dx\n\t&quot; \    &quot;movl %%eax,%1\n\t&quot; \    &quot;movl %%edx,%2&quot; \    : \    : &quot;i&quot; ((short) (0x8000+(dpl&lt;&lt;13)+(type&lt;&lt;8))), \    &quot;o&quot; (*((char *) (gate_addr))), \    &quot;o&quot; (*(4+(char *) (gate_addr))), \    &quot;d&quot; ((char *) (addr)),&quot;a&quot; (0x00080000))#define set_intr_gate(n,addr) \    _set_gate(&amp;idt[n],14,0,addr)#define set_trap_gate(n,addr) \    _set_gate(&amp;idt[n],15,0,addr)#define set_system_gate(n,addr) \    _set_gate(&amp;idt[n],15,3,addr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dpl表示的是特权级，0和3分别表示0特权级（内核级）和3特权级（用户级），内核级高于用户级。中断和异常处理是由内核来完成的，Linux出于对内核的保护，不允许用户进程直接访问内核，因此需要设置为0特权级。但是有些情况下，用户进程又需要内核代码的支持，因此就需要系统调用，它是用户进程与内核打交道的接口，是由用户进程直接调用的。因此其在3特权级下。</p><h3 id="17、分析get-free-page-函数的代码，叙述在主内存中获取一个空闲页的技术路线。"><a href="#17、分析get-free-page-函数的代码，叙述在主内存中获取一个空闲页的技术路线。" class="headerlink" title="17、分析get_free_page()函数的代码，叙述在主内存中获取一个空闲页的技术路线。"></a>17、分析get_free_page()函数的代码，叙述在主内存中获取一个空闲页的技术路线。</h3><p>①将EAX 设置为0,EDI 设置指向mem_map 的最后一项（mem_map+PAGING_PAGES-1），std设置扫描是从高地址向低地址。从mem_map的最后一项反向扫描，找出引用次数为0(AL)的页，如果没有则退出；如果找到，则将找到的页设引用数为1；<br>② ECX左移12位得到页的相对地址，加LOW_MEM得到物理地址，将此页最后一个字节的地址赋值给EDI（LOW_MEM+4092）；<br>③ stosl将EAX的值设置到ES:EDI所指内存，即反向清零1024*32bit，将此页清空；<br>④ 将页的地址（存放在EAX）返回。</p><h3 id="18、copy-process函数的参数最后五项是：long-eip-long-cs-long-eflags-long-esp-long-ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。详细论证其他所有参数是如何传入的。"><a href="#18、copy-process函数的参数最后五项是：long-eip-long-cs-long-eflags-long-esp-long-ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。详细论证其他所有参数是如何传入的。" class="headerlink" title="18、copy_process函数的参数最后五项是：long eip,long cs,long eflags,long esp,long ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。详细论证其他所有参数是如何传入的。"></a>18、copy_process函数的参数最后五项是：long eip,long cs,long eflags,long esp,long ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。详细论证其他所有参数是如何传入的。</h3><p>copy_process执行时因为进程调用了fork函数，会导致中断，中断使CPU硬件自动将SS、ESP、EFLAGS、CS、EIP这几个寄存器的值按照顺序压入 进程0内核栈，又因为函数专递参数是使用栈的，所以刚好可以做为copy_process的最后五项参数。</p><h3 id="19、详细分析Linux操作系统如何设置保护模式的中断机制。"><a href="#19、详细分析Linux操作系统如何设置保护模式的中断机制。" class="headerlink" title="19、详细分析Linux操作系统如何设置保护模式的中断机制。"></a>19、详细分析Linux操作系统如何设置保护模式的中断机制。</h3><p>①中断描述符表 (IDT) 初始化:<br>在保护模式下，IDT用于存放中断处理程序的地址。每个中断或异常都有一个与之相关联的中断描述符。Linux在启动时设置这个IDT。</p><p>②初始化中断控制器 (PIC):<br>为了接收来自外部硬件的中断，Linux首先需要初始化可编程中断控制器 (PIC)。这是一个芯片，负责从外部硬件接收中断请求并将它们传递给CPU。</p><p>③设置中断处理程序:<br>Linux为每个可能的中断或异常设置了一个中断处理程序。这些处理程序在内核启动时初始化，并与特定的中断或异常号相关联。</p><p>④加载IDT寄存器:<br>使用lidt指令加载IDT的地址和大小。这告诉CPU在哪里可以找到中断描述符表。</p><p>⑤开启中断:<br>通过设置CPU的标志寄存器中的中断标志（IF）来启用中断。</p><h3 id="20、分析Linux操作系统如何剥夺用户进程访问内核及其他进程的能力。"><a href="#20、分析Linux操作系统如何剥夺用户进程访问内核及其他进程的能力。" class="headerlink" title="20、分析Linux操作系统如何剥夺用户进程访问内核及其他进程的能力。"></a>20、分析Linux操作系统如何剥夺用户进程访问内核及其他进程的能力。</h3><p>所有程序的设计都是基于段的。</p><p>①进程跨越到内核</p><p>用户进程代码段的特权级都是3，内核的特权级是0，Intel IA-32架构禁止代码跨越特权级长跳转，3特权级长跳转到0特权级是禁止的，0特权级长跳转到3特权级同样是禁止的。所以这样的非法长跳转指令会被CPU硬件有效阻拦，进程与内核的边界得到有效的保护。</p><p>②当一个进程的代码中有非法的跨进程跳转的指令时，比如，ljmp指令执行时，该指令后面的操作数是“段内偏移段选择子”。代码段的段选择子存储在CS里面。仔细考察一下，可以看出Linux 0.11中所有进程的CS的内容都是一样的，用二进制表示的形式都是0000000000001111。CPU硬件无法识别是哪一个进程的CS，也就无法选择段描述符，只能默认使用当前LDT中提供的段描述符，所以类似ljmp这样的段间跳转指令，无论后面操作数怎么写，都无法跨越当前进程的代码段，也就无法进行段间跳转，最终只能是执行到本段。</p><h3 id="21、-system-call中有以下代码，分析后面这两行代码的意义。"><a href="#21、-system-call中有以下代码，分析后面这两行代码的意义。" class="headerlink" title="21、_system_call中有以下代码，分析后面这两行代码的意义。"></a>21、_system_call中有以下代码，分析后面这两行代码的意义。</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">cmpl $nr_system_calls<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">%</span>eaxja bad_sys_call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证发起的系统调用编号是否在有效范围内，阻止非法的系统调用。</p><h3 id="22、分析copy-page-tables（）函数的代码，叙述父进程如何为子进程复制页表。"><a href="#22、分析copy-page-tables（）函数的代码，叙述父进程如何为子进程复制页表。" class="headerlink" title="22、分析copy_page_tables（）函数的代码，叙述父进程如何为子进程复制页表。"></a>22、分析copy_page_tables（）函数的代码，叙述父进程如何为子进程复制页表。</h3><p>①要求源地址和目的地址必须按 4MB 对齐；<br>②计算源地址和目的地址所在的页目录表项的线性地址；<br>③通过所占的地址空间计算所用的页目录表项数；<br>④根据页目录表项的起始线性地址和页目录表项数遍历页目录表，对每一个源页目录表项，如果对应的页表存在，则进行以下操作：<br>    4.1 从页目录表项中取出对应的页表的起始物理地址；<br>    4.2 为目的页表分配一个空白页，并挂到目的页目录表项上，并将标志设置为用户级的、可读写、存在；<br>    4.3 计算需要复制的页表项数，如果是内核空间(源地址为 0)，则只复制前 160 项(内核空间只占低 640 KB)，否则全部复制。<br>    4.4 遍历页表，对于每一个源页表项，如果对应的页存在，则进行以下操作：<br>           4.4.1 从源页表中复制每一项到目的页表，同时置为”只读”，以便进行 COW；<br>           4.4.2 如果页表项对应的页的地址在1MB 以上(非内核页面)，则将源页表项置为只读，并在 mem_map 中将该页的引用计数加 1；<br>⑤重新加载 cr3，刷新 TLB。</p><h3 id="23、进程0创建进程1时，为进程1建立了task-struct及内核栈，第一个页表，分别位于物理内存两个页。请问，这两个页的位置，究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。"><a href="#23、进程0创建进程1时，为进程1建立了task-struct及内核栈，第一个页表，分别位于物理内存两个页。请问，这两个页的位置，究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。" class="headerlink" title="23、进程0创建进程1时，为进程1建立了task_struct及内核栈，第一个页表，分别位于物理内存两个页。请问，这两个页的位置，究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。"></a>23、进程0创建进程1时，为进程1建立了task_struct及内核栈，第一个页表，分别位于物理内存两个页。请问，这两个页的位置，究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。</h3><p>均占用内核的线性地址空间，原因如下：</p><p>通过逆向扫描页表位图，并由第一空页的下标左移 12 位加 LOW_MEM 得到该页的物理地址，位于 16M 内存末端。 代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//代码路径：mm/memory.c</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> __res <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"ax"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"std ; repne ; scasb\n\t"</span><span class="token string">"jne 1f\n\t"</span><span class="token string">"movb $1,1(%%edi)\n\t"</span><span class="token string">"sall $12,%%ecx\n\t"</span><span class="token string">"addl %2,%%ecx\n\t"</span><span class="token string">"movl %%ecx,%%edx\n\t"</span><span class="token string">"movl $1024,%%ecx\n\t"</span><span class="token string">"leal 4092(%%edx),%%edi\n\t"</span><span class="token string">"rep ; stosl\n\t"</span><span class="token string">"movl %%edx,%%eax\n"</span><span class="token string">"1:"</span><span class="token operator">:</span><span class="token string">"=a"</span> <span class="token punctuation">(</span>__res<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"0"</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"i"</span> <span class="token punctuation">(</span>LOW_MEM<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"c"</span> <span class="token punctuation">(</span>PAGING_PAGES<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"D"</span> <span class="token punctuation">(</span>mem_map<span class="token operator">+</span>PAGING_PAGES<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"di"</span><span class="token punctuation">,</span><span class="token string">"cx"</span><span class="token punctuation">,</span><span class="token string">"dx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> __res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程 0 和进程 1 的 LDT 的 LIMIT 属性将进程 0 和进程 1 的地址空间限定0~640KB， 所以进程 0、 进程 1 均无法访问到这两个页面， 故两页面占用内核的线性地址空间。进程 0 的局部描述符如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//代码路径：boot\head.s</span><span class="token punctuation">.</span>align <span class="token number">2</span>setup_paging<span class="token operator">:</span>movl $<span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">%</span>ecx<span class="token comment">/* 5 pages - pg_dir+4 page tables */</span>xorl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eaxxorl <span class="token operator">%</span>edi<span class="token punctuation">,</span><span class="token operator">%</span>edi<span class="token comment">/* pg_dir is at 0x000 */</span>cld<span class="token punctuation">;</span>rep<span class="token punctuation">;</span>stoslmovl $pg0<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>_pg_dir<span class="token comment">/* set present bit/user r/w */</span>movl $pg1<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>_pg_dir<span class="token operator">+</span><span class="token number">4</span><span class="token comment">/*  --------- " " --------- */</span>movl $pg2<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>_pg_dir<span class="token operator">+</span><span class="token number">8</span><span class="token comment">/*  --------- " " --------- */</span>movl $pg3<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>_pg_dir<span class="token operator">+</span><span class="token number">12</span><span class="token comment">/*  --------- " " --------- */</span>movl $pg3<span class="token operator">+</span><span class="token number">4092</span><span class="token punctuation">,</span><span class="token operator">%</span>edimovl $<span class="token number">0xfff007</span><span class="token punctuation">,</span><span class="token operator">%</span>eax<span class="token comment">/*  16Mb - 4096 + 7 (r/w user,p) */</span>std<span class="token number">1</span><span class="token operator">:</span>stosl<span class="token comment">/* fill pages backwards - more efficient :-) */</span>subl $<span class="token number">0x1000</span><span class="token punctuation">,</span><span class="token operator">%</span>eaxjge <span class="token number">1</span>bxorl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax<span class="token comment">/* pg_dir is at 0x0000 */</span>movl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>cr3<span class="token comment">/* cr3 - page directory start */</span>movl <span class="token operator">%</span>cr0<span class="token punctuation">,</span><span class="token operator">%</span>eaxorl $<span class="token number">0x80000000</span><span class="token punctuation">,</span><span class="token operator">%</span>eaxmovl <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>cr0<span class="token comment">/* set paging (PG) bit */</span>ret<span class="token comment">/* this also flushes prefetch-queue */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，指明了内核的线性地址空间为0x000000~Oxffffff(即前16M），且线性地址与物理地址呈现一一对应的关系。为进程1分配的这两个页，在16MB的顶端倒数第一页、第二页，因此占用内核的线性地址空间。<br>进程0的线性地址空间是内存前640KB，因为进程0的LDT中的limit 属性限制了进程0能够访问的地址空间。进程1拷贝了进程0的页表（160项），而这160个页表项即为内核第一个页表的前160项，指向的是物理内存前640KB，因此无法访问到16MB的顶端倒数的两个页。<br>进程0创建进程1的时候，先后通过get_free_page函数从物理地址中取出了两个页，但是并没有将这两个页的物理地址填入任何新的页表项中。此时只有内核的页表中包含了与这段物理地址对应的项，也就是说此时只有内核页表中有页表项指向这两个页的首地址，所以这两个页占用了内核线性空间。</p><h3 id="24、假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。"><a href="#24、假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。" class="headerlink" title="24、假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。"></a>24、假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。</h3><p>这两个页面均占用内核的线性地址空间。既然是内核线性地址空间，则与物理地址空间为一一对应关系。根据每一个进程占用16个页目录表项，则进程4占用从第65～81项的页目录表项。同理，进程5占用第81～96项的页目录表项。因为目前只分配了一个页面（用作进程的第一个页表），则分别只须要使用第一个页目录表项便可。映射关系如图：</p><p><img src="/posts/22763.htm/image-20231224210848666.png" alt></p><h3 id="25、有以下代码，代码中的”ljmp-0-n-t”-很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m”-amp-tmp-a-，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。"><a href="#25、有以下代码，代码中的”ljmp-0-n-t”-很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m”-amp-tmp-a-，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。" class="headerlink" title="25、有以下代码，代码中的”ljmp %0\n\t” 很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m” (*&amp;__tmp.a)，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。"></a>25、有以下代码，代码中的”ljmp %0\n\t” 很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m” (*&amp;__tmp.a)，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">switch_to</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> __tmp<span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__asm__</span><span class="token punctuation">(</span></span><span class="token string">"cmpl %%ecx,_current\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"je 1f\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"movw %%dx,%1\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"xchgl %%ecx,_current\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"ljmp %0\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"cmpl %%ecx,_last_task_used_math\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"jne 1f\n\t"</span> <span class="token punctuation">\</span>   <span class="token string">"clts\n"</span> <span class="token punctuation">\</span>   <span class="token string">"1:"</span> <span class="token punctuation">\</span>   <span class="token expression"><span class="token operator">::</span></span><span class="token string">"m"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">&amp;</span>__tmp<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">"m"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">&amp;</span>__tmp<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>   <span class="token string">"d"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">_TSS</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="token string">"c"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> task<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tmp.a 为偏移量，tmp.b 为段选择子。在上述代码中，CPU通过 movw %%dx,%1\n\t 指令,将当前寄存器的值保存到当前进程的TSS中，再将目标进程 n的TSS和LDT恢复给CPU的各寄存器，ljmp 加上 TSS 描述符的选择子tmp.b和偏移量tmp.a 就实现了进程的跳转。</p><h3 id="26、进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for-pause-，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。"><a href="#26、进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for-pause-，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。" class="headerlink" title="26、进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for(;;) pause()，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。"></a>26、进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for(;;) pause()，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。</h3><p>fork 为 inline 函数，其中调用了 sys_call0，产生 0x80 中断，将 ss, esp, eflags, cs, eip 压栈，其中 eip 为 int 0x80 的下一句的地址。在 copy_process 中，内核将进程 0 的 tss 复制得到进程 1 的 tss，并将进程 1 的 tss.eax 设为 0，而进程 0 中的 eax 为 1。在进程调度时 tss 中的值被恢复至相应寄存器中，包括 eip， eax 等。所以中断返回后，进程 0 和进程 1 均会从 int 0x80 的下一句开始执行，即 fork 执行了两次。</p><p>由于 eax 代表返回值，所以进程 0 和进程 1 会得到不同的返回值，在fork返回到进程0后，进程0判断返回值非 0，因此执行代码for(;😉 pause();</p><p>在sys_pause函数中，内核设置了进程0的状态为 TASK_INTERRUPTIBLE，并进行进程调度。由于只有进程1处于就绪态，因此调度执行进程1的指令。由于进程1在TSS中设置了eip等寄存器的值，因此从 int 0x80 的下一条指令开始执行，且设定返回 eax 的值作为 fork 的返回值（值为 0），因此进程1执行了 init 的 函数。导致反复执行，主要是利用了两个系统调用 sys_fork 和 sys_pause 对进程状态的设置，以及利用了进程调度机制。<br>代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//代码路径：init/main.c</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">move_to_user_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//fork的返回值为1，if(!1)为假/* we count on this going ok */</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会执行这一行</span><span class="token punctuation">&#125;</span><span class="token comment">//代码路径：include/unistd.h</span><span class="token keyword">int</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> \<span class="token punctuation">&#123;</span> \<span class="token keyword">long</span> __res<span class="token punctuation">;</span> \__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token string">"int $0x80"</span> \<span class="token operator">:</span> <span class="token string">"=a"</span> <span class="token punctuation">(</span>__res<span class="token punctuation">)</span> \ <span class="token comment">//__res的值就是eax，是copy_process（）的返回值last_pid（1）</span><span class="token operator">:</span> <span class="token string">"0"</span> <span class="token punctuation">(</span>__NR_##name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token keyword">if</span> <span class="token punctuation">(</span>__res <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> \ <span class="token comment">//iret后，执行这一行！__res就是eax，值是1</span><span class="token keyword">return</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> __res<span class="token punctuation">;</span> \ <span class="token comment">//返回1！</span>errno <span class="token operator">=</span> <span class="token operator">-</span>__res<span class="token punctuation">;</span> \<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> \<span class="token punctuation">&#125;</span><span class="token comment">//代码路径：kernel/fork.c</span><span class="token keyword">int</span> <span class="token function">copy_process</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">long</span> ebp<span class="token punctuation">,</span><span class="token keyword">long</span> edi<span class="token punctuation">,</span><span class="token keyword">long</span> esi<span class="token punctuation">,</span><span class="token keyword">long</span> gs<span class="token punctuation">,</span><span class="token keyword">long</span> none<span class="token punctuation">,</span><span class="token keyword">long</span> ebx<span class="token punctuation">,</span><span class="token keyword">long</span> ecx<span class="token punctuation">,</span><span class="token keyword">long</span> edx<span class="token punctuation">,</span><span class="token keyword">long</span> fs<span class="token punctuation">,</span><span class="token keyword">long</span> es<span class="token punctuation">,</span><span class="token keyword">long</span> ds<span class="token punctuation">,</span><span class="token keyword">long</span> eip<span class="token punctuation">,</span><span class="token keyword">long</span> cs<span class="token punctuation">,</span><span class="token keyword">long</span> eflags<span class="token punctuation">,</span><span class="token keyword">long</span> esp<span class="token punctuation">,</span><span class="token keyword">long</span> ss<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span>task<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>current<span class="token punctuation">;</span><span class="token comment">/* NOTE! this doesn't copy the supervisor stack */</span>p<span class="token operator">-></span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span>p<span class="token operator">-></span>pid <span class="token operator">=</span> last_pid<span class="token punctuation">;</span>p<span class="token operator">-></span>father <span class="token operator">=</span> current<span class="token operator">-></span>pid<span class="token punctuation">;</span>p<span class="token operator">-></span>counter <span class="token operator">=</span> p<span class="token operator">-></span>priority<span class="token punctuation">;</span>p<span class="token operator">-></span>signal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">-></span>leader <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* process leadership doesn't inherit */</span>p<span class="token operator">-></span>utime <span class="token operator">=</span> p<span class="token operator">-></span>stime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">-></span>cutime <span class="token operator">=</span> p<span class="token operator">-></span>cstime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">-></span>start_time <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>back_link <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>esp0 <span class="token operator">=</span> PAGE_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ss0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>eip <span class="token operator">=</span> eip<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>eflags <span class="token operator">=</span> eflags<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>eax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ecx <span class="token operator">=</span> ecx<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>edx <span class="token operator">=</span> edx<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ebx <span class="token operator">=</span> ebx<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>esp <span class="token operator">=</span> esp<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ebp <span class="token operator">=</span> ebp<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>esi <span class="token operator">=</span> esi<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>edi <span class="token operator">=</span> edi<span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>es <span class="token operator">=</span> es <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>cs <span class="token operator">=</span> cs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ss <span class="token operator">=</span> ss <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ds <span class="token operator">=</span> ds <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>fs <span class="token operator">=</span> fs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>gs <span class="token operator">=</span> gs <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ldt <span class="token operator">=</span> <span class="token function">_LDT</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>trace_bitmap <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span><span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"clts ; fnsave %0"</span><span class="token operator">::</span><span class="token string">"m"</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_mem</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>task<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">free_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_OPEN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">=</span>p<span class="token operator">-></span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token operator">-></span>f_count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>pwd<span class="token punctuation">)</span>current<span class="token operator">-></span>pwd<span class="token operator">-></span>i_count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>root<span class="token punctuation">)</span>current<span class="token operator">-></span>root<span class="token operator">-></span>i_count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>executable<span class="token punctuation">)</span>current<span class="token operator">-></span>executable<span class="token operator">-></span>i_count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span><span class="token punctuation">(</span>nr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-></span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span><span class="token punctuation">(</span>nr<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>FIRST_LDT_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-></span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span>state <span class="token operator">=</span> TASK_RUNNING<span class="token punctuation">;</span><span class="token comment">/* do this last, just in case */</span><span class="token keyword">return</span> last_pid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="27、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）"><a href="#27、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）" class="headerlink" title="27、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）"></a>27、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）</h3><p>①进程中有就绪进程，且时间片没有用完。</p><p>正常情况下，schedule()函数首先扫描任务数组。通过比较每个就绪（TASK_RUNNING）任务的运行时间递减滴答计数counter 的值来确定当前哪个进程运行的时间最少。哪一个的值大，就表示运行时间还不长，于是就选中该进程，最后调用switch_to()执行实际的进程切换操作</p><p>②进程中有就绪进程，但所有就绪进程时间片都用完（c=0）</p><p>如果此时所有处于TASK_RUNNING 状态进程的时间片都已经用完，系统就会根据每个进程的优先权值priority，对系统中所有进程（包括正在睡眠的进程）重新计算每个任务需要运行的时间片值counter。计算的公式是：</p><p>counter = counter + priority/2</p><p>然后 schdeule()函数重新扫描任务数组中所有处于TASK_RUNNING 状态，重复上述过程，直到选择出一个进程为止。最后调用switch_to()执行实际的进程切换操作。</p><p>③所有进程都不是就绪的c=-1</p><p>此时代码中的c=-1，next=0，跳出循环后，执行switch_to(0)，切换到进程0执行，因此所有进程都不是就绪的时候进程0执行。</p><h3 id="28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？"><a href="#28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？" class="headerlink" title="28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？"></a>28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？</h3><p>panic函数如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">\linux0<span class="token punctuation">.</span><span class="token number">11</span>\kernel\panic<span class="token punctuation">.</span>c<span class="token keyword">volatile</span> <span class="token keyword">void</span> <span class="token function">panic</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Kernel panic: %s\n\r"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> task<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"In swapper task - not syncing\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">sys_sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①panic()函数是当系统发现无法继续运行下去的故障时将调用它，会导致程序终止，然后由系统显示错误号。如果出现错误的函数不是进程0，那么就要进行数据同步，把缓冲区中的数据尽量同步到硬盘上。遵循了Linux尽量简明的原则。</p><p>②改进panic函数：将死循环for(;;)改进为跳转到内核进程（始终运行在0特权级的进程），让内核继续执行。</p><h3 id="29、getblk函数中，申请空闲缓冲块的标准就是b-count为0，而申请到之后，为什么在wait-on-buffer-bh-后又执行if（bh-gt-b-count）来判断b-count是否为0？"><a href="#29、getblk函数中，申请空闲缓冲块的标准就是b-count为0，而申请到之后，为什么在wait-on-buffer-bh-后又执行if（bh-gt-b-count）来判断b-count是否为0？" class="headerlink" title="29、getblk函数中，申请空闲缓冲块的标准就是b_count为0，而申请到之后，为什么在wait_on_buffer(bh)后又执行if（bh-&gt;b_count）来判断b_count是否为0？"></a>29、getblk函数中，申请空闲缓冲块的标准就是b_count为0，而申请到之后，为什么在wait_on_buffer(bh)后又执行if（bh-&gt;b_count）来判断b_count是否为0？</h3><p>wait_on_buffer(bh)内包含睡眠函数，虽然此时已经找到比较合适的空闲缓冲块，但是可能在睡眠阶段该缓冲区被其他任务所占用，因此必须重新搜索，判断是否被修改，修改则写盘等待解锁。判断若被占用则重新repeat，继续执行if（bh-&gt;b_count）</p><h3 id="30、b-dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。"><a href="#30、b-dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。" class="headerlink" title="30、b_dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。"></a>30、b_dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。</h3><p>同步前可以被进程读写，但不能挪为它用（即关联其它物理块）。b_dirt是针对硬盘方向的，进程与缓冲块方向由b_uptodate标识。只要b_uptodate为1，缓冲块就能被进程读写。读操作不会改变缓冲块中数据的内容，写操作后，改变了缓冲区内容，需要将b_dirt置1。由于此前缓冲块中的数据已经用硬盘数据块更新了，所以后续同步过程中缓冲块没有写入新数据的部分和原来硬盘对应的部分相同，所有的数据都是进程希望同步到硬盘数据块上的，不会把垃圾数据同步到硬盘数据库上去，所以b_uptodate仍为1。<br>所以，b_dirt为1，进程仍能对缓冲区进行读写。</p><p>代码证据如下：</p><p>①读写文件均与b_dirt无关</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">\linux0<span class="token punctuation">.</span><span class="token number">11</span>\fs\file_dev<span class="token punctuation">.</span>c<span class="token keyword">int</span> <span class="token function">file_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//…</span><span class="token keyword">if</span> <span class="token punctuation">(</span>filp<span class="token operator">-></span>f_flags <span class="token operator">&amp;</span> O_APPEND<span class="token punctuation">)</span>pos <span class="token operator">=</span> inode<span class="token operator">-></span>i_size<span class="token punctuation">;</span><span class="token keyword">else</span>pos <span class="token operator">=</span> filp<span class="token operator">-></span>f_pos<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>block <span class="token operator">=</span> <span class="token function">create_block</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span>pos<span class="token operator">/</span>BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-></span>i_dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//…</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">file_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//…</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">=</span>count<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">=</span> <span class="token function">bmap</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span><span class="token punctuation">(</span>filp<span class="token operator">-></span>f_pos<span class="token punctuation">)</span><span class="token operator">/</span>BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-></span>i_dev<span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//…</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②在获取缓冲块时，亦与b_dirt无任何关系</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">\linux0<span class="token punctuation">.</span><span class="token number">11</span>\fs\buffer<span class="token punctuation">.</span>c<span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">bread</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bh<span class="token operator">=</span><span class="token function">getblk</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"bread: getblk returned NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-></span>b_uptodate<span class="token punctuation">)</span><span class="token keyword">return</span> bh<span class="token punctuation">;</span><span class="token function">ll_rw_block</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wait_on_buffer</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bh<span class="token operator">-></span>b_uptodate<span class="token punctuation">)</span><span class="token keyword">return</span> bh<span class="token punctuation">;</span><span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">\linux0<span class="token punctuation">.</span><span class="token number">11</span>\fs\buffer<span class="token punctuation">.</span>c<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BADNESS</span><span class="token expression"><span class="token punctuation">(</span>bh<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token operator">-></span>b_dirt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token operator">-></span>b_lock<span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> <span class="token function">getblk</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span><span class="token keyword">int</span> block<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span> tmp<span class="token punctuation">,</span> <span class="token operator">*</span> bh<span class="token punctuation">;</span>repeat<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bh <span class="token operator">=</span> <span class="token function">get_hash_table</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> bh<span class="token punctuation">;</span><span class="token comment">//…</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="31、wait-on-buffer函数中为什么不用if（）而是用while（）？"><a href="#31、wait-on-buffer函数中为什么不用if（）而是用while（）？" class="headerlink" title="31、wait_on_buffer函数中为什么不用if（）而是用while（）？"></a>31、wait_on_buffer函数中为什么不用if（）而是用while（）？</h3><p>答案1</p><p>被调度回来 b_lock 可能还没清零；<br>有可能被其他进程加了 b_lock。<br>答案2</p><p>因为可能存在一种情况是，很多进程都在等待一个缓冲块。在缓冲块同步完毕，唤醒各等待进程到轮转到某一进程的过程中，很有可能此时的缓冲块又被其它进程所占用，并被加上了锁。此时如果用if()，则此进程会从之前被挂起的地方继续执行，不会再判断是否缓冲块已被占用而直接使用，就会出现错误；而如果用while()，则此进程会再次确认缓冲块是否已被占用，在确认未被占用后，才会使用，这样就不会发生之前那样的错误</p><h3 id="32、分析ll-rw-block-READ-bh-读硬盘块数据到缓冲区的整个流程（包括借助中断形成的类递归），叙述这些代码实现的功能。"><a href="#32、分析ll-rw-block-READ-bh-读硬盘块数据到缓冲区的整个流程（包括借助中断形成的类递归），叙述这些代码实现的功能。" class="headerlink" title="32、分析ll_rw_block(READ,bh)读硬盘块数据到缓冲区的整个流程（包括借助中断形成的类递归），叙述这些代码实现的功能。"></a>32、分析ll_rw_block(READ,bh)读硬盘块数据到缓冲区的整个流程（包括借助中断形成的类递归），叙述这些代码实现的功能。</h3><p><img src="/posts/22763.htm/image-20231227142129411.png" alt></p><h3 id="33、分析包括安装根文件系统、安装文件系统、打开文件、读文件在内的文件操作。"><a href="#33、分析包括安装根文件系统、安装文件系统、打开文件、读文件在内的文件操作。" class="headerlink" title="33、分析包括安装根文件系统、安装文件系统、打开文件、读文件在内的文件操作。"></a>33、分析包括安装根文件系统、安装文件系统、打开文件、读文件在内的文件操作。</h3><p><img src="/posts/22763.htm/image-20231227142344859.png" alt></p><h3 id="34、在创建进程、从硬盘加载程序、执行这个程序的过程中，sys-fork、do-execve、do-no-page分别起了什么作用？"><a href="#34、在创建进程、从硬盘加载程序、执行这个程序的过程中，sys-fork、do-execve、do-no-page分别起了什么作用？" class="headerlink" title="34、在创建进程、从硬盘加载程序、执行这个程序的过程中，sys_fork、do_execve、do_no_page分别起了什么作用？"></a>34、在创建进程、从硬盘加载程序、执行这个程序的过程中，sys_fork、do_execve、do_no_page分别起了什么作用？</h3><p>sys_fork 用于进程的创建，do_execve 用于加载并执行新的程序，而 do_no_page 用于处理程序执行过程中的缺页异常，确保所需的内存页面被正确加载。</p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FISCO BCOS区块链系统新增节点时无法同步数据的原因及解决方法</title>
      <link href="/posts/46552.html"/>
      <url>/posts/46552.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题内容"><a href="#问题内容" class="headerlink" title="问题内容"></a>问题内容</h2><ul><li>最近在搭建FISCO BCOS区块链系统，但是在一个旧的区块链上新增一个区块链节点时出现了一些问题<ul><li>目前的区块链拥有三个节点，区块链中已经部署了一些合约，产生了一些交易，因此最新的块高为21。现在我想要在这个区块链系统中新增一个节点，而且需要它同步之前产生的一些数据</li><li>FISCO的文档里写了新增区块链节点的方法，但是需要手动操作很多步骤，因此我在FISCO的github仓库里找到了一个他们提供的脚本，这个脚本可以根据你的配置文件实现节点的一键扩充。脚本地址为：<a href="https://github.com/FISCO-BCOS/fisco_bcos_docker_compose">https://github.com/FISCO-BCOS/fisco_bcos_docker_compose</a></li><li>但是使用上述脚本扩充了节点以后，新增加的节点无法同步之前的数据，往区块链上新增交易时，这个新增加的节点也不会参与共识，块高一直为0</li></ul></li></ul><p><img src="/posts/46552.htm/e9b86bd7a0b3054eace36d891a6c748.png" alt></p><ul><li>使用区块链控制台连接区块链后，将这个新增加的节点通过addSealer方法加入区块链的共识中，但是问题仍未解决</li></ul><p><img src="/posts/46552.htm/efe15722cdb5ef929525a26f31a07aa.png" alt></p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><ul><li>查看新节点的log以后发现，新增加的这个节点一直报创世区块错误，因此虽然使用控制台强行将这个节点加入到共识里，但是由于创世区块就和其他节点不同，因此这个新节点无法同步数据，也无法接收新的交易产生共识</li></ul><p><img src="/posts/46552.htm/555ea899a0bbca5d74c5b5dce1cf5ab.png" alt></p><ul><li>FISCO BCOS区块链系统中的创世区块的哈希存放于/node*/conf/group.*.genesis文件里，但是这个文件是脚本从原先存在的节点拷贝过来的，不应该有错才对。</li><li>通过查看<a href="https://github.com/FISCO-BCOS/fisco_bcos_docker_compose里build.sh的脚本内容，我发现脚本在扩容区块链节点时，会修改原来的节点以及新产生的节点的/node\*/conf/group.\*.genesis文件，脚本的这个行为在区块链从未使用时可以让我们不用使用控制台手动将新增加的节点加入共识列表，直接使用即可。但是在扩容已经产生过数据的区块链时，这个操作由于修改了/node\*/conf/group.\*.genesis文件，会导致创世区块的哈希值也被同步地修改了，所以新增加的节点将无法正确同步原先区块链中的数据，也无法参与区块链的共识">https://github.com/FISCO-BCOS/fisco_bcos_docker_compose里build.sh的脚本内容，我发现脚本在扩容区块链节点时，会修改原来的节点以及新产生的节点的/node\*/conf/group.\*.genesis文件，脚本的这个行为在区块链从未使用时可以让我们不用使用控制台手动将新增加的节点加入共识列表，直接使用即可。但是在扩容已经产生过数据的区块链时，这个操作由于修改了/node\*/conf/group.\*.genesis文件，会导致创世区块的哈希值也被同步地修改了，所以新增加的节点将无法正确同步原先区块链中的数据，也无法参与区块链的共识</a></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>当区块链从未使用时，使用<a href="https://github.com/FISCO-BCOS/fisco_bcos_docker_compose脚本即可非常方便地实现区块链节点的扩容">https://github.com/FISCO-BCOS/fisco_bcos_docker_compose脚本即可非常方便地实现区块链节点的扩容</a></li><li>但是当区块链已经产生过数据时，需要修改脚本里的代码，把build.sh中与gen_groups函数的相关内容全部删除,同时需要使用FISCO的区块链控制台手动将新产生的这个节点使用addLeaser方法加入共识列表即可</li></ul><p><img src="/posts/46552.htm/image-20231213183654003.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> FISCO BCOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在kubernetes(k8s)集群上部署FISCO BCOS区块链系统</title>
      <link href="/posts/17797.html"/>
      <url>/posts/17797.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>三台ubuntu22.04主机（分别为<code>ubuntu：192.168.3.54</code>；<code>worker1:192.168.3.57</code>；<code>worker2:192.168.3.58</code>）</li><li>安装docker，kubernetes</li><li>三台主机加入同一kubernetes集群</li></ul><h2 id="创建区块链"><a href="#创建区块链" class="headerlink" title="创建区块链"></a>创建区块链</h2><ul><li><p>使用上篇文章《使用Docker容器化部署FISCO-BCOS区块链系统》中的方法，在ubuntu这台主机上生成运行在三台主机上的区块链节点</p><p><img src="/posts/17797.htm/image-20231129233416152.png" alt></p></li><li><p>分别进入三个文件夹中，修改节点的配置信息，我这里以修改192.168.3.54主机上的节点信息为示例(若不进行修改，则之后无法在区块链浏览器中正确绑定区块链节点)</p><ul><li><p>进入<code>192.168.3.54/node0</code>文件夹，打开<code>config.ini文件</code></p><p><img src="/posts/17797.htm/image-20231130000036370.png" alt></p></li><li><p>将<code>jsonrpc_listen_ip</code>这一项从<code>127.0.0.1</code>更改为对应的主机ip，我这里是<code>192.168.3.54</code></p><p><img src="/posts/17797.htm/image-20231130000110116.png" alt></p></li></ul></li><li><p>在worker1和worker2主机上都新建<code>fisco/nodes</code>文件夹，并将ubuntu主机上生成的<code>192.168.3.57文件夹</code>和<code>192.168.3.58文件夹</code>分别拷贝到这两台主机的<code>fisco/nodes</code>文件夹下</p></li></ul><h2 id="新建k8s配置文件"><a href="#新建k8s配置文件" class="headerlink" title="新建k8s配置文件"></a>新建k8s配置文件</h2><ul><li><p>在ubuntu主机上新建名为<code>my-pod.yaml</code>的kubernetes配置文件，该文件用于启用ubuntu主机上的区块链节点，配置文件内容如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apiVersion: v1kind: Podmetadata:  name: <span class="token number">54</span>-node0spec:  nodeName: ubuntu  hostNetwork: <span class="token boolean">true</span>  containers:  - name: <span class="token number">54</span>-node0    image: fiscoorg/fiscobcos:v2.9.1    args: <span class="token punctuation">[</span><span class="token string">"-c"</span>, <span class="token string">"config.ini"</span><span class="token punctuation">]</span>    workingDir: /data    ports:    - containerPort: <span class="token number">30300</span>    - containerPort: <span class="token number">20200</span>    - containerPort: <span class="token number">8545</span>    volumeMounts:    - name: fisco-volume      mountPath: /data  volumes:  - name: fisco-volume    hostPath:      path: /home/qudoudou/fisco/nodes/192.168.3.54/node0      type: Directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建名为<code>worker1-pod.yaml</code>的kubernetes配置文件，该文件用于启用worker1主机上的区块链节点，配置文件内容如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apiVersion: v1kind: Podmetadata:  name: <span class="token number">57</span>-node1spec:  nodeName: worker1  hostNetwork: <span class="token boolean">true</span>  containers:  - name: <span class="token number">57</span>-node1    image: fiscoorg/fiscobcos:v2.9.1    args: <span class="token punctuation">[</span><span class="token string">"-c"</span>, <span class="token string">"config.ini"</span><span class="token punctuation">]</span>    workingDir: /data    ports:    - containerPort: <span class="token number">30300</span>    - containerPort: <span class="token number">20200</span>    - containerPort: <span class="token number">8545</span>    volumeMounts:    - name: fisco-volume      mountPath: /data  volumes:  - name: fisco-volume    hostPath:      path: /home/qudoudou/fisco/nodes/192.168.3.57/node0      type: Directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建名为<code>worker2-pod.yaml</code>的kubernetes配置文件，该文件用于启用worker2主机上的区块链节点，配置文件内容如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apiVersion: v1kind: Podmetadata:  name: <span class="token number">58</span>-node2spec:  nodeName: worker2  hostNetwork: <span class="token boolean">true</span>  containers:  - name: <span class="token number">58</span>-node2    image: fiscoorg/fiscobcos:v2.9.1    args: <span class="token punctuation">[</span><span class="token string">"-c"</span>, <span class="token string">"config.ini"</span><span class="token punctuation">]</span>    workingDir: /data    ports:    - containerPort: <span class="token number">30300</span>    - containerPort: <span class="token number">20200</span>    - containerPort: <span class="token number">8545</span>    volumeMounts:    - name: fisco-volume      mountPath: /data  volumes:  - name: fisco-volume    hostPath:      path: /home/qudoudou/fisco/nodes/192.168.3.58/node0      type: Directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意：以上三个配置文件可以写在同一个文件中。配置文件里<code>hostNetwork: true</code>表示启动的pod会使用宿主机网络的命名空间，因此k8s集群外的服务可以直接用机器ip+port的方式来获取区块链的信息，方便后续的使用。同时配置文件里还创建了一个路径为<code>/home/qudoudou/fisco/nodes/192.168.3.58/node0</code>的挂载，将该区块链节点的文件夹挂载到pod里，之后pod产生的数据就会存储在该文件夹里，这里的路径需要根据第一步拷贝区块链节点时的位置而定</p></li></ul><h2 id="启动区块链节点"><a href="#启动区块链节点" class="headerlink" title="启动区块链节点"></a>启动区块链节点</h2><p>使用<code>kubectl apply -f my-pod.yaml</code>、<code>kubectl apply -f worker1-pod.yaml</code>、<code>kubectl apply -f worker2-pod.yaml</code>三条语句启动区块链节点</p><ul><li>使用<code>kubectl get pod</code>查询三个节点是否都启动成功</li></ul><p><img src="/posts/17797.htm/image-20231129235256611.png" alt></p><ul><li><p>进入ubuntu主机的fisco文件夹，使用<code>tail -f nodes/192.168.3.54/node0/log/log*  | grep connected</code>命令查看ubuntu主机上的节点与其他两台机器上的节点的连接情况，发现连接数量为2，证明三个节点都成功上链</p><p><img src="/posts/17797.htm/image-20231129235455604.png" alt></p></li></ul><h2 id="查看区块链信息"><a href="#查看区块链信息" class="headerlink" title="查看区块链信息"></a>查看区块链信息</h2><ul><li><p>启动区块链浏览器，配置群组和节点</p><p><img src="/posts/17797.htm/image-20231129235618905.png" alt></p></li><li><p>成功连接上三台机器上的节点，对节点进行HelloWorld合约的部署等操作后，可以在区块链浏览器里成功观测到交易数量等信息发生改变</p><p><img src="/posts/17797.htm/image-20231129235751949.png" alt></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> FISCO BCOS </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker容器化部署FISCO BCOS区块链系统</title>
      <link href="/posts/11725.html"/>
      <url>/posts/11725.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>ubuntu22.04</p></li><li><p>Docker</p></li><li><p>安装openssl</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span> openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="搭建单群组的四节点区块链"><a href="#搭建单群组的四节点区块链" class="headerlink" title="搭建单群组的四节点区块链"></a>搭建单群组的四节点区块链</h2><p>本文将详细讲解“在本地模拟多台机器搭建单群组的四节点区块链”以及“在多台机器上搭建单群组的四节点区块链”这两种情景的搭建方法</p><h3 id="在本地模拟多台机器来搭建单群组的四节点区块链"><a href="#在本地模拟多台机器来搭建单群组的四节点区块链" class="headerlink" title="在本地模拟多台机器来搭建单群组的四节点区块链"></a>在本地模拟多台机器来搭建单群组的四节点区块链</h3><ul><li><p>下载FISCO BCOS官方的安装脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 创建操作目录</span><span class="token builtin class-name">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> fisco <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> fisco<span class="token comment">## 下载脚本</span><span class="token function">curl</span> -<span class="token comment">#LO https://github.com/FISCO-BCOS/FISCO-BCOS/releases/download/v2.9.1/build_chain.sh &amp;&amp; chmod u+x build_chain.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进入之前创建的fisco目录，执行以下指令即可在本地生成一条单群组的四节点区块链。其中，<code>-d</code>参数表示使用docker来构建区块链。请确保机器的<code>30300~30303，20200~20203，8545~8548</code>端口没有被占用，也可以通过<code>-p</code>参数指定其他端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> build_chain.sh <span class="token parameter variable">-d</span> <span class="token parameter variable">-l</span> <span class="token number">127.0</span>.0.1:4 <span class="token parameter variable">-p</span> <span class="token number">30300,20200</span>,8545<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/11725.htm/image-20231122162124487.png" alt></p></li><li><p>执行<code>bash nodes/127.0.0.1/start_all.sh</code>命令来启动区块链。这行命令相当于进入每个节点目录后自动运行<code>docker run -d --rm --name $&#123;nodePath&#125; -v $&#123;nodePath&#125;:/data --network=host -w=/data fiscoorg/fiscobcos:latest -c config.ini</code>指令。运行<code>start_all.sh</code>时，机器会自动检查本地是否存在FISCO-BCOS对应版本的节点镜像，如果不存在的话则会从docker hub上下载</p><p><img src="/posts/11725.htm/image-20231122162202723.png" alt></p></li><li><p>可以通过以下命令检查容器状态是否正常</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">egrep</span> fiscobcos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/11725.htm/image-20231122162231831.png" alt></p></li><li><p>可以通过检查日志来确认节点的p2p连接数目以及共识是否正常</p><ul><li><p>查看节点node0连接的节点数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> nodes/127.0.0.1/node0/log/log*  <span class="token operator">|</span> <span class="token function">grep</span> connected<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/11725.htm/image-20231122162314782.png" alt></p></li><li><p>检查共识</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> nodes/127.0.0.1/node0/log/log*  <span class="token operator">|</span> <span class="token function">grep</span> +++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/11725.htm/image-20231122162337416.png" alt></p></li></ul></li></ul><h3 id="在多台机器上搭建单群组的四节点区块链"><a href="#在多台机器上搭建单群组的四节点区块链" class="headerlink" title="在多台机器上搭建单群组的四节点区块链"></a>在多台机器上搭建单群组的四节点区块链</h3><ul><li><p>假设有四台机器，IP地址分别为<code>192.168.1.2</code>、<code>192.168.1.3</code>、<code>192.168.1.4</code>、<code>192.168.1.5</code>。现在需要在这四台机器上使用docker部署单群组的四节点区块链，每台机器分别部署一个节点。</p></li><li><p>在<code>192.168.1.2</code>上下载FISCO BCOS官方的安装脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 创建操作目录</span><span class="token builtin class-name">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> fisco <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> fisco<span class="token comment">## 下载脚本</span><span class="token function">curl</span> -<span class="token comment">#LO https://github.com/FISCO-BCOS/FISCO-BCOS/releases/download/v2.9.1/build_chain.sh &amp;&amp; chmod u+x build_chain.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进入<code>192.168.1.2</code>的fisco文件夹，新建ipconf文件并写入以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.1.2:1 agency1 <span class="token number">1</span><span class="token number">192.168</span>.1.3:1 agency1 <span class="token number">1</span><span class="token number">192.168</span>.1.4:1 agency1 <span class="token number">1</span><span class="token number">192.168</span>.1.5:1 agency1 <span class="token number">1</span><span class="token comment">#按行分割，每一行表示一个服务器，格式为`IP:NUM AgencyName GroupList`，每行内的项使用空格分割，**不可有空行**。</span><span class="token comment">#`IP:NUM`表示机器的IP地址以及该机器上的节点数。`AgencyName`表示机构名，用于指定使用的机构证书。`GroupList`表示该行生成的节点所属的组，以`,`分割。例如`192.168.0.2:2 agency1 1,2`表示`ip`为`192.168.0.2`的机器上有两个节点，这两个节点属于机构`agency1`，属于group1和group2。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/11725.htm/image-20231122165300962.png" alt></p></li><li><p>在<code>192.168.1.2</code>的fisco文件夹里执行以下指令生成区块链节点文件，<code>-f</code>表示从配置文件fiscoconf中读取配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> build_chain.sh <span class="token parameter variable">-d</span> <span class="token parameter variable">-f</span> ipconf <span class="token parameter variable">-p</span> <span class="token number">30300,20200</span>,8545 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/posts/11725.htm/image-20231122165355227.png" alt></p><ul><li><p>执行成功后将会在<code>192.168.1.2</code>机器下的<code>fisco/nodes</code>文件夹下生成以下文件</p><p><img src="/posts/11725.htm/image-20231122165646718.png" alt></p></li></ul><ul><li><p>在其他主机上都新建<code>fisco/nodes</code>文件夹，并将<code>192.168.1.2</code>机器上的<code>fisco/nodes</code>文件夹中的<code>192.168.1.3</code>、<code>192.168.1.4</code>以及<code>192.168.1.5</code>这三个文件夹分别拷贝到其余三台机器中</p></li><li><p>进入四台主机上的<code>fisco/nodes/*</code>文件夹中（<code>*</code>代表各自机器的IP)，各自运行如下指令启动各自的节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> start_all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行该指令时，每台机器都会先检查自己机器上是否存在fisco镜像，如果不存在则从docker hub上下载</p></li><li>至此，在四台机器上搭建属于同一群组的四节点区块链成功！检查区块链共识以及上链节点数的方法与上文中的在单台机器上的检查方法相同</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> FISCO BCOS </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在FISCO BCOS区块链系统中使用Java SDK Demo进行压力测试</title>
      <link href="/posts/45190.html"/>
      <url>/posts/45190.html</url>
      
        <content type="html"><![CDATA[<h2 id="FISCO-BCOS的Java-SDK-Demo介绍"><a href="#FISCO-BCOS的Java-SDK-Demo介绍" class="headerlink" title="FISCO BCOS的Java SDK Demo介绍"></a>FISCO BCOS的Java SDK Demo介绍</h2><ul><li>Java SDK Demo是FISCO BCOS团队基于Java SDK的基准测试集合，能够对FISCO BCOS节点进行压力测试。Java SDK Demo提供有合约编译功能，能够将Solidity合约文件转换成Java合约文件，此外还提供了针对转账合约、CRUD合约以及AMOP功能的压力测试示例程序</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Java SDK Demo中的测试程序能够在部署有JDK 1.8 ~ JDK 14的环境中运行，执行测试程序前请先确保已安装所需版本的JDK。以在Ubuntu系统中安装OpenJDK 11为例：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装open JDK 11</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-11-jdk<span class="token comment"># 验证Java版本</span><span class="token function">java</span> <span class="token parameter variable">--version</span><span class="token comment"># 输出以下内容：</span><span class="token comment"># openjdk 11.0.10 2021-01-19</span><span class="token comment"># OpenJDK Runtime Environment (build 11.0.10+9-Ubuntu-0ubuntu1.20.04)</span><span class="token comment"># OpenJDK 64-Bit Server VM (build 11.0.10+9-Ubuntu-0ubuntu1.20.04, mixed mode, sharing)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载源码</span><span class="token function">git</span> clone https://github.com/FISCO-BCOS/java-sdk-demo<span class="token builtin class-name">cd</span> java-sdk-demo<span class="token comment"># 切换到2.0版本</span><span class="token function">git</span> checkout main-2.0<span class="token comment"># 编译源码</span>./gradlew build <span class="token comment">#当网络无法访问GitHub时，请从https://gitee.com/FISCO-BCOS/java-sdk-demo处的main-2.0分支下载源码。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Demo"><a href="#配置Demo" class="headerlink" title="配置Demo"></a>配置Demo</h2><ul><li>使用Java SDK Demo之前，需要进行证书拷贝以及区块链节点端口的配置，我的区块链环境是按照FISCO BCOS开发文档配置的本地四节点联盟链，以下操作以此环境为基础</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> dist<span class="token comment"># 拷贝证书(假设SDK证书位于~/fisco/nodes/127.0.0.1/sdk目录，请根据实际情况更改路径)</span><span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/fisco/nodes/127.0.0.1/sdk/* conf<span class="token comment"># 拷贝配置文件</span><span class="token comment"># 注:</span><span class="token comment">#   默认搭建的FISCO BCOS区块链系统Channel端口是20200，若修改了该端口，请同步修改config.toml中的[network.peers]配置选项</span><span class="token function">cp</span> conf/config-example.toml conf/config.toml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由于我的区块链环境具有四个节点，所以应该修改java-sdk-demo/dist/conf/config.toml下的network.peers配置</li></ul><p><img src="/posts/45190.htm/1-1698402346492-1.png" alt></p><h2 id="执行压力测试程序"><a href="#执行压力测试程序" class="headerlink" title="执行压力测试程序"></a>执行压力测试程序</h2><ul><li>Java SDK Demo提供了一系列压测程序，包括串行转账合约压测、并行转账合约压测、AMOP压测等，具体使用方法如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入dist目录</span><span class="token builtin class-name">cd</span> dist<span class="token comment"># 将需要转换为java代码的sol文件拷贝到dist/contracts/solidity路径下</span><span class="token comment"># 转换sol, 其中$&#123;packageName&#125;是生成的java代码包路径</span><span class="token comment"># 生成的java代码位于 /dist/contracts/sdk/java目录下</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">"apps/*:lib/*:conf/"</span> org.fisco.bcos.sdk.demo.codegen.DemoSolcToJava <span class="token variable">$&#123;packageName&#125;</span><span class="token comment"># 压测串行转账合约:</span><span class="token comment"># count: 压测的交易总量</span><span class="token comment"># tps: 压测QPS</span><span class="token comment"># groupId: 压测的群组ID</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.PerformanceOk <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupId<span class="token punctuation">]</span><span class="token comment"># 压测并行转账合约</span><span class="token comment"># --------------------------</span><span class="token comment"># 基于Solidity并行合约parallelok添加账户:</span><span class="token comment"># groupID: 压测的群组ID</span><span class="token comment"># count: 压测的交易总量</span><span class="token comment"># tps: 压测QPS</span><span class="token comment"># file: 保存生成账户的文件名</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.ParallelOkPerf <span class="token punctuation">[</span>parallelok<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupID<span class="token punctuation">]</span> <span class="token punctuation">[</span>add<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 基于Precompiled并行合约precompiled添加账户</span><span class="token comment"># (参数含义同上)</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.ParallelOkPerf <span class="token punctuation">[</span>precompiled<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupID<span class="token punctuation">]</span> <span class="token punctuation">[</span>add<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># --------------------------</span><span class="token comment"># 基于Solidity并行合约parallelok发起转账交易压测</span><span class="token comment"># groupID: 压测的群组ID</span><span class="token comment"># count: 压测的交易总量</span><span class="token comment"># tps: 压测的QPS</span><span class="token comment"># file: 转账用户文件</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.ParallelOkPerf <span class="token punctuation">[</span>parallelok<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupID<span class="token punctuation">]</span> <span class="token punctuation">[</span>transfer<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 基于Precompiled并行合约Precompiled发起转账压测</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.ParallelOkPerf <span class="token punctuation">[</span>precompiled<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupID<span class="token punctuation">]</span> <span class="token punctuation">[</span>transfer<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># CRUD合约压测</span><span class="token comment"># 压测CRUD insert</span><span class="token comment"># count: 压测的交易总量</span><span class="token comment"># tps: 压测QPS</span><span class="token comment"># groupId: 压测群组</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.PerformanceTable <span class="token punctuation">[</span>insert<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupId<span class="token punctuation">]</span><span class="token comment"># 压测CRUD update</span><span class="token comment"># (参数解释同上)</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.PerformanceTable <span class="token punctuation">[</span>update<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupId<span class="token punctuation">]</span><span class="token comment"># 压测CRUD remove</span><span class="token comment"># (参数解释同上)</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.PerformanceTable <span class="token punctuation">[</span>remove<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupId<span class="token punctuation">]</span><span class="token comment"># 压测CRUD query</span><span class="token comment"># (参数解释同上)</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.PerformanceTable <span class="token punctuation">[</span>query<span class="token punctuation">]</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token punctuation">[</span>tps<span class="token punctuation">]</span> <span class="token punctuation">[</span>groupId<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="压测自定义合约"><a href="#压测自定义合约" class="headerlink" title="压测自定义合约"></a>压测自定义合约</h2><ul><li>在现实生产中，我们需要对自己定义的智能合约进行压力测试，因此需要将自己编写的智能合约加入Java SDK Demo中，同时还要编写相应的压力测试程序，来测试合约中指定的功能。</li><li>压测自定义合约的开发均在Java SDK Demo中进行，我们需要开发三个文件，分别是：<ol><li>待压测的智能合约：HelloWorld.sol</li><li>带压测的智能合约所编译出的Java类：HelloWorld.java(可以使用FISCO BCOS控制台的脚本进行智能合约到Java代码的自动转换，具体操作方式见FISCO BCOS系统开发文档中Java SDK的引入)</li><li>压力测试程序：PerformanceHelloWorld.java</li></ol></li></ul><h3 id="项目的存放路径"><a href="#项目的存放路径" class="headerlink" title="项目的存放路径"></a>项目的存放路径</h3><ul><li><p>以上三个文件的存放路径如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java-sdk-demo/src/main/java/org/fisco/bcos/sdk/demo                                              ├── contract                                              │   ├── HelloWorld.java                                              │   └── sol                                              │       └── HelloWorld.sol                                              └── perf                                                  └── PerformanceHelloWorld.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="以HelloWorld合约为例，开发压测程序"><a href="#以HelloWorld合约为例，开发压测程序" class="headerlink" title="以HelloWorld合约为例，开发压测程序"></a>以HelloWorld合约为例，开发压测程序</h3><ul><li><p>压力测试程序的写法可以根据Java SDK Demo中提供的示例程序进行修改，这里展示基于HelloWorld合约写出的压力测试程序，测试的是HelloWorld合约中的set方法</p><ol><li><p>HelloWorld.sol</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span><span class="token operator">>=</span><span class="token version number">0.4.24</span> <span class="token operator">&lt;</span><span class="token version number">0.6.11</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> name<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> n<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HelloWorld.java(使用脚本根据HelloWorld.sol自动生成，这里不做展示)</p></li><li><p>PerformanceHelloWorld.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Copyright 2014-2020 [fisco-dev] * * &lt;p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file * except in compliance with the License. You may obtain a copy of the License at * * &lt;p>http://www.apache.org/licenses/LICENSE-2.0 * * &lt;p>Unless required by applicable law or agreed to in writing, software distributed under the * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either * express or implied. See the License for the specific language governing permissions and * limitations under the License. */</span><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>perf</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RateLimiter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">BcosSDK</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">BcosSDKException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Client</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>contract<span class="token punctuation">.</span></span><span class="token class-name">HelloWorld</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>perf<span class="token punctuation">.</span>callback<span class="token punctuation">.</span></span><span class="token class-name">PerformanceCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>perf<span class="token punctuation">.</span>collector<span class="token punctuation">.</span></span><span class="token class-name">PerformanceCollector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">ConstantConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">TransactionReceipt</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>model<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">ContractException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerformanceHelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">PerformanceHelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> sendedTransactions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Usage:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                <span class="token string">" \t java -cp 'conf/:lib/*:apps/*' org.fisco.bcos.sdk.demo.perf.PerformanceHelloWorld [count] [tps] [groupId]."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> configFileName <span class="token operator">=</span> <span class="token class-name">ConstantConfig</span><span class="token punctuation">.</span><span class="token constant">CONFIG_FILE_NAME</span><span class="token punctuation">;</span>            <span class="token class-name">URL</span> configUrl <span class="token operator">=</span> <span class="token class-name">PerformanceOk</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>configFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configUrl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The configFile "</span> <span class="token operator">+</span> configFileName <span class="token operator">+</span> <span class="token string">" doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> qps <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> groupId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                    <span class="token string">"====== PerformanceOk trans, count: "</span>                            <span class="token operator">+</span> count                            <span class="token operator">+</span> <span class="token string">", qps:"</span>                            <span class="token operator">+</span> qps                            <span class="token operator">+</span> <span class="token string">", groupId: "</span>                            <span class="token operator">+</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> configFile <span class="token operator">=</span> configUrl<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BcosSDK</span> sdk <span class="token operator">=</span> <span class="token class-name">BcosSDK</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// build the client</span>            <span class="token class-name">Client</span> client <span class="token operator">=</span> sdk<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// deploy the HelloWorld</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====== Deploy Ok ====== "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getCryptoSuite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCryptoKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                    <span class="token string">"====== Deploy HelloWorld succ, address: "</span> <span class="token operator">+</span> helloWorld<span class="token punctuation">.</span><span class="token function">getContractAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ====== "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">PerformanceCollector</span> collector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            collector<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>qps<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> area <span class="token operator">=</span> count <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Integer</span> total <span class="token operator">=</span> count<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====== PerformanceOk trans start ======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ThreadPoolService</span> threadPoolService <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolService</span><span class="token punctuation">(</span>                            <span class="token string">"PerformanceHelloWorld"</span><span class="token punctuation">,</span>                            sdk<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxBlockingQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                threadPoolService                        <span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                                <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token annotation punctuation">@Override</span>                                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                        <span class="token class-name">PerformanceCallback</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        callback<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        callback<span class="token punctuation">.</span><span class="token function">setCollector</span><span class="token punctuation">(</span>collector<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                            helloWorld<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Hello, fisco"</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            <span class="token class-name">TransactionReceipt</span> receipt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionReceipt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            receipt<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            callback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>receipt<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span>                                        <span class="token keyword">int</span> current <span class="token operator">=</span> sendedTransactions<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">>=</span> area <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current <span class="token operator">%</span> area<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                                                    <span class="token string">"Already sended: "</span>                                                            <span class="token operator">+</span> current                                                            <span class="token operator">+</span> <span class="token string">"/"</span>                                                            <span class="token operator">+</span> total                                                            <span class="token operator">+</span> <span class="token string">" transactions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// wait to collect all the receipts</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>collector<span class="token punctuation">.</span><span class="token function">getReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            threadPoolService<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BcosSDKException</span> <span class="token operator">|</span> <span class="token class-name">ContractException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                    <span class="token string">"====== PerformanceOk test failed, error message: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="HelloWorld合约的压力测试"><a href="#HelloWorld合约的压力测试" class="headerlink" title="HelloWorld合约的压力测试"></a>HelloWorld合约的压力测试</h3><ul><li><p>将上述三个文件放入对应的目录后，执行以下操作对HelloWorld合约进行压力测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /java-sdk-demo/dist<span class="token comment">#200000代表总测试量为200000   10000代表每秒向区块链系统发送10000次请求   1代表区块链系统的groupId</span><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token string">'conf/:lib/*:apps/*'</span> org.fisco.bcos.sdk.demo.perf.PerformanceHelloWorld <span class="token number">200000</span> <span class="token number">10000</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>压力测试结果如下，可以看到本机的四节点区块链系统对HelloWorld合约里set方法的TPS为1797.67</p></li></ul><p><img src="/posts/45190.htm/2-1698402357631-3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 区块链 </tag>
            
            <tag> FISCO BCOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FISCO BCOS区块链系统中Java SDK的调用</title>
      <link href="/posts/39296.html"/>
      <url>/posts/39296.html</url>
      
        <content type="html"><![CDATA[<h2 id="新建SpringBoot项目"><a href="#新建SpringBoot项目" class="headerlink" title="新建SpringBoot项目"></a>新建SpringBoot项目</h2><ul><li>使用IDEA新建一个SpringBoot项目，使用Maven来管理依赖，SpringBoot的依赖项选择Spring Web</li></ul><p><img src="/posts/39296.htm/image-20231023231031956.png" alt></p><p><img src="/posts/39296.htm/image-20231023231050248.png" alt></p><h2 id="添加FISCO-BCOS区块链系统依赖"><a href="#添加FISCO-BCOS区块链系统依赖" class="headerlink" title="添加FISCO BCOS区块链系统依赖"></a>添加FISCO BCOS区块链系统依赖</h2><ul><li>在pom.xml中添加FISCO BCOS区块链系统的Java SDK依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.fisco-bcos.java-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fisco-bcos-java-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拷贝区块链秘钥"><a href="#拷贝区块链秘钥" class="headerlink" title="拷贝区块链秘钥"></a>拷贝区块链秘钥</h2><ul><li>在项目目录的resources下建立新文件夹conf</li></ul><p><img src="/posts/39296.htm/image-20231023232852322.png" alt></p><ul><li>将“区块链文件夹/nodes/${ip}/sdk/”目录下的证书拷贝到conf文件夹中</li><li>我的区块链文件夹是fisco，部署的是本地四节点区块链，因此我这里的ip是127.0.0.1，文件夹下的证书如下</li></ul><p><img src="/posts/39296.htm/image-20231023233636633.png" alt></p><h2 id="配置区块链系统"><a href="#配置区块链系统" class="headerlink" title="配置区块链系统"></a>配置区块链系统</h2><ul><li>在项目的resources下创建配置文件 fisco-config.toml</li></ul><p><img src="/posts/39296.htm/image-20231023234108773.png" alt></p><ul><li>下面给出fisco-config.toml的示例代码</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">cryptoMaterial</span><span class="token punctuation">]</span><span class="token key property">certPath</span> <span class="token punctuation">=</span> <span class="token string">"conf"</span>                           <span class="token comment"># The certification path  </span><span class="token comment"># The following configurations take the certPath by default if commented</span><span class="token comment"># caCert = "conf/ca.crt"                    # CA cert file path</span><span class="token comment"># If connect to the GM node, default CA cert path is $&#123;certPath&#125;/gm/gmca.crt</span><span class="token comment"># sslCert = "conf/sdk.crt"                  # SSL cert file path</span><span class="token comment"># If connect to the GM node, the default SDK cert path is $&#123;certPath&#125;/gm/gmsdk.crt</span><span class="token comment"># sslKey = "conf/sdk.key"                   # SSL key file path</span><span class="token comment"># If connect to the GM node, the default SDK privateKey path is $&#123;certPath&#125;/gm/gmsdk.key</span><span class="token comment"># enSslCert = "conf/gm/gmensdk.crt"         # GM encryption cert file path</span><span class="token comment"># default load the GM SSL encryption cert from $&#123;certPath&#125;/gm/gmensdk.crt</span><span class="token comment"># enSslKey = "conf/gm/gmensdk.key"          # GM ssl cert file path</span><span class="token comment"># default load the GM SSL encryption privateKey from $&#123;certPath&#125;/gm/gmensdk.key</span><span class="token punctuation">[</span><span class="token table class-name">network</span><span class="token punctuation">]</span><span class="token key property">peers</span><span class="token punctuation">=</span><span class="token punctuation">[</span><span class="token string">"192.168.3.54:20200"</span><span class="token punctuation">,</span> <span class="token string">"192.168.3.54:20201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.3.54:20202"</span><span class="token punctuation">,</span> <span class="token string">"192.168.3.54:20203"</span><span class="token punctuation">]</span>    <span class="token comment"># The peer list to connect</span><span class="token comment"># AMOP configuration</span><span class="token comment"># You can use following two methods to configure as a private topic message sender or subscriber.</span><span class="token comment"># Usually, the public key and private key is generated by subscriber.</span><span class="token comment"># Message sender receive public key from topic subscriber then make configuration.</span><span class="token comment"># But, please do not config as both the message sender and the subscriber of one private topic, or you may send the message to yourself.</span><span class="token comment"># Configure a private topic as a topic message sender.</span><span class="token comment"># [[amop]]</span><span class="token comment"># topicName = "PrivateTopic"</span><span class="token comment"># publicKeys = [ "conf/amop/consumer_public_key_1.pem" ]    # Public keys of the nodes that you want to send AMOP message of this topic to.</span><span class="token comment"># Configure a private topic as a topic subscriber.</span><span class="token comment"># [[amop]]</span><span class="token comment"># topicName = "PrivateTopic"</span><span class="token comment"># privateKey = "conf/amop/consumer_private_key.p12"         # Your private key that used to subscriber verification.</span><span class="token comment"># password = "123456"</span><span class="token punctuation">[</span><span class="token table class-name">account</span><span class="token punctuation">]</span><span class="token key property">keyStoreDir</span> <span class="token punctuation">=</span> <span class="token string">"account"</span>         <span class="token comment"># The directory to load/store the account file, default is "account"</span><span class="token comment"># accountFilePath = ""          # The account file path (default load from the path specified by the keyStoreDir)</span><span class="token key property">accountFileFormat</span> <span class="token punctuation">=</span> <span class="token string">"pem"</span>       <span class="token comment"># The storage format of account file (Default is "pem", "p12" as an option)</span><span class="token comment"># accountAddress = ""           # The transactions sending account address</span><span class="token comment"># Default is a randomly generated account</span><span class="token comment"># The randomly generated account is stored in the path specified by the keyStoreDir</span><span class="token comment"># password = ""                 # The password used to load the account file</span><span class="token punctuation">[</span><span class="token table class-name">threadPool</span><span class="token punctuation">]</span><span class="token comment"># channelProcessorThreadSize = "16"         # The size of the thread pool to process channel callback</span><span class="token comment"># Default is the number of cpu cores</span><span class="token comment"># receiptProcessorThreadSize = "16"         # The size of the thread pool to process transaction receipt notification</span><span class="token comment"># Default is the number of cpu cores</span><span class="token key property">maxBlockingQueueSize</span> <span class="token punctuation">=</span> <span class="token string">"102400"</span>             <span class="token comment"># The max blocking queue size of the thread pool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中主要修改peers=[“192.168.3.54:20200”, “192.168.3.54:20201”, “192.168.3.54:20202”, “192.168.3.54:20203”]这一项，它代表你自己区块链中各个节点的ip和端口，由于我的区块链系统运行在虚拟机上，所以我这里填的是虚拟机的ip地址，如果节点运行在本机上，则这里的ip地址填写127.0.0.1</li></ul><h2 id="将智能合约转换成Java类"><a href="#将智能合约转换成Java类" class="headerlink" title="将智能合约转换成Java类"></a>将智能合约转换成Java类</h2><ul><li>编写好的智能合约想在Java项目中使用则必须转换成Java类，FISCO BCOS系统给我们提供了转换脚本，但是我们需要先下载控制台</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/fisco <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/fisco<span class="token comment"># 获取控制台</span><span class="token function">curl</span> -<span class="token comment">#LO https://github.com/FISCO-BCOS/console/releases/download/v2.9.2/download_console.sh</span><span class="token comment"># 若因为网络问题导致长时间无法执行以上命令，请尝试以下命令：</span>https://osp-1257653870.cos.ap-guangzhou.myqcloud.com/FISCO-BCOS/console/releases/v2.9.2/download_console.sh<span class="token function">bash</span> download_console.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将需要使用到的Solidity智能合约放入fisco/console/contracts/solidity的目录。这里我使用console中的HelloWorld.sol作为例子。保证HelloWorld.sol在指定的目录下，然后进入目录fisco/console</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入目录~/fisco/console</span><span class="token builtin class-name">cd</span> ~/fisco/console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>生成智能合约对应的Java类，这里需要根据使用的控制台版本来使用不同的命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">若控制台版本大于等于2.8.0：<span class="token comment"># 使用sol2java.sh将contracts/solidity下的所有合约编译产生bin,abi,java工具类。</span><span class="token comment"># 当前目录~/fisco/console</span>$ <span class="token function">bash</span> sol2java.sh <span class="token parameter variable">-p</span> org.com.fisco<span class="token comment"># 以上命令中参数“org.com.fisco”是指定产生的java类所属的包名。</span><span class="token comment"># 通过命令./sol2java.sh -h可查看该脚本使用方法</span>若控制台版本小于2.8.0：<span class="token comment"># 使用sol2java.sh将contracts/solidity下的所有合约编译产生bin,abi,java工具类。</span><span class="token comment"># 当前目录~/fisco/console</span>$ <span class="token function">bash</span> sol2java.sh org.com.fisco<span class="token comment"># 以上命令中参数“org.com.fisco”是指定产生的java类所属的包名。</span><span class="token comment"># ./sol2java.sh [packageName] [solidityFilePath] [javaCodeOutputDir]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将生成的Java类复制到项目中，所放的位置要与我们设定的包名相同</li></ul><p><img src="/posts/39296.htm/image-20231023234849576.png" alt></p><h2 id="新建并编写控制器类"><a href="#新建并编写控制器类" class="headerlink" title="新建并编写控制器类"></a>新建并编写控制器类</h2><ul><li>在项目中新建包controller，新建控制器类FiscoController，控制器代码如下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>fiscotest<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>fiscotest<span class="token punctuation">.</span></span><span class="token class-name">HelloWorld</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">BcosSDK</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Client</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>fisco<span class="token punctuation">.</span>bcos<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>keypair<span class="token punctuation">.</span></span><span class="token class-name">CryptoKeyPair</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FiscoController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> configFile <span class="token operator">=</span> <span class="token class-name">FiscoController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"fisco-config.toml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BcosSDK</span> sdk <span class="token operator">=</span>  <span class="token class-name">BcosSDK</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Client</span> client <span class="token operator">=</span> sdk<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HelloWorld</span> helloWorld<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deploy"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deploycontract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">CryptoKeyPair</span> cryptoKeyPair <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getCryptoSuite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCryptoKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helloWorld <span class="token operator">=</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span>cryptoKeyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"deploy success!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getcontract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> helloWorld<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ContractValue="</span><span class="token operator">+</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/set"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setcontract</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        helloWorld<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> helloWorld<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"set success!! now ContractValue="</span><span class="token operator">+</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试Java-SDK"><a href="#测试Java-SDK" class="headerlink" title="测试Java SDK"></a>测试Java SDK</h2><ul><li>运行SpringBoot项目</li><li>进入虚拟机中运行区块链节点</li></ul><p><img src="/posts/39296.htm/image-20231023235049515.png" alt></p><ul><li>进入区块链中运行区块链浏览器</li></ul><p><img src="/posts/39296.htm/image-20231023235149085.png" alt></p><ul><li>在本机通过访问<a href="http://${虚拟机ip}:5100,成功进入区块链浏览器">http://${虚拟机ip}:5100,成功进入区块链浏览器</a></li></ul><p><img src="/posts/39296.htm/image-20231023235516137.png" alt></p><ul><li>在本机通过浏览器测试智能合约的部署</li></ul><p><img src="/posts/39296.htm/image-20231023235529721.png" alt></p><ul><li>在本机通过浏览器测试智能合约名称的获取</li></ul><p><img src="/posts/39296.htm/image-20231023235547488.png" alt></p><ul><li>在本机通过ApiPost测试智能合约名称的修改</li></ul><p><img src="/posts/39296.htm/image-20231023235626718.png" alt></p><ul><li>经过以上测试之后刷新区块链浏览器，发现数据发生变化，Java SDK在我们的项目中成功的进行调用</li></ul><p><img src="/posts/39296.htm/image-20231023235715624.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> 区块链 </tag>
            
            <tag> FISCO BCOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VmWare ubuntu22.04虚拟机网络异常的解决方法</title>
      <link href="/posts/33494.html"/>
      <url>/posts/33494.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>今天使用Vmware下的Ubuntu22.04虚拟机时突然发现无法使用网络</li><li>发现系统右上角的网络标志消失</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>打开终端，关闭NetworkManager</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo service NetworkManager stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用gedit打开NetworkManager.state</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo gedit /var/lib/NetworkManager/NetworkManager.state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将NetworkManager.state修改成以下状态并保存</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[main]NetworkingEnabled=trueWirelessEnabled=trueWWANEnabled=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启NetworkManager</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo service NetworkManager restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重启NetworkManager后就会发现系统右上角的网络标识成功恢复，测试发现可以上网啦~</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不同版本的Ubuntu系统使用的命令略有区别，Ubuntu18.04以及之前的版本可以将”NetworkManager”替换成”network-manager”，但是Ubuntu22.04一定要使用”NetworkManager”，否则命令行会报错，提示：Failed to start network-manager.service: Unit network-manager.service not found.</p>]]></content>
      
      
      <categories>
          
          <category> 开发问题与解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> ubuntu </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署第一个Rails项目</title>
      <link href="/posts/41599.html"/>
      <url>/posts/41599.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Ruby2-3-8"><a href="#安装Ruby2-3-8" class="headerlink" title="安装Ruby2.3.8"></a>安装Ruby2.3.8</h2><ul><li>由于ubuntu22.04使用的是openssl3，于是之前安装ruby时安装的是ruby3.2.2版本。但是rotten-potatoes项目使用的ruby需要2.3.8版本，于是需要先安装ruby2.3.8</li></ul><h3 id="安装openssl1"><a href="#安装openssl1" class="headerlink" title="安装openssl1"></a>安装openssl1</h3><ul><li>要安装ruby2.3.8版本就需要先安装openssl1，在终端输入以下命令</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rvm pkg install openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022172514896.png" alt></p><h3 id="安装ruby2-3-8"><a href="#安装ruby2-3-8" class="headerlink" title="安装ruby2.3.8"></a>安装ruby2.3.8</h3><ul><li>使用命令行安装ruby2.3.8（安装时可能需要输入登录密码）</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rvm install ruby-2.3.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022173656581.png" alt></p><h3 id="设置默认使用ruby2-3-8"><a href="#设置默认使用ruby2-3-8" class="headerlink" title="设置默认使用ruby2.3.8"></a>设置默认使用ruby2.3.8</h3><ul><li>使用命令行配置默认使用2.3.8版本的ruby（如果是第一次安装ruby，则需要打开终端偏好设置，找到unnamed &gt; Command &gt; 勾选 Run command as login shell，并重新登录系统）</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rvm install ruby-2.3.8 --default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022173728058.png" alt></p><h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><ul><li>使用命令行克隆rotten-potatoes项目</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git clone https://gitee.com/shinabc/rotten-potatoes.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022163514659.png" alt></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>在终端安装项目所需的nodejs以及数据库依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo apt install libpq-dev  (安装数据库依赖)sudo apt install nodejs      (安装nodejs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h2><ul><li>进入项目文件夹</li><li>运行以下代码安装项目的所有依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">bundle install --without production<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022174041179.png" alt></p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><ul><li>在项目文件夹下运行以下代码来初始化项目</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rake db:setuprake db:migrate           (初始化数据库)rake db:seed  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022174349027.png" alt></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ul><li>在项目文件夹下运行以下代码来启动项目</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rails server                   (启动服务器)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/41599.htm/image-20231022174433465.png" alt></p><ul><li>打开浏览器，访问<a href="http://localhost:3000/">http://localhost:3000/</a> ，发现项目成功运行！</li></ul><p><img src="/posts/41599.htm/image-20231022174507288.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Ruby on Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu22.04中安装Ruby</title>
      <link href="/posts/33976.html"/>
      <url>/posts/33976.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo apt update            （更新软件包列表）sudo apt install software-properties-common    (安装第三方库支持)sudo apt-add-repository ppa:rael-gc/rvm     （添加rvm源）sudo apt update           （更新软件包列表）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h2><h3 id="安装rvm"><a href="#安装rvm" class="headerlink" title="安装rvm"></a>安装rvm</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo apt install rvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/33976.htm/image-20231021232315314.png" alt></p><h3 id="加入rvm用户组"><a href="#加入rvm用户组" class="headerlink" title="加入rvm用户组"></a>加入rvm用户组</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo usermod -a -G rvm <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yourusername</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/33976.htm/image-20231021232503090.png" alt></p><h3 id="更改终端的偏好设置并重启"><a href="#更改终端的偏好设置并重启" class="headerlink" title="更改终端的偏好设置并重启"></a>更改终端的偏好设置并重启</h3><ul><li><p>在终端中选择“配置文件首选项”</p><p><img src="/posts/33976.htm/image-20231022001107153.png" alt></p></li><li><p>在配置文件的“命令”选项栏中选择“以登录shell方式运行命令”</p></li></ul><p><img src="/posts/33976.htm/image-20231022001238336.png" alt></p><ul><li>重启系统</li></ul><h3 id="安装Ruby-1"><a href="#安装Ruby-1" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rvm install <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ruby版本号</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>安装Ruby的某个版本，我使用的是最新的Ruby 3.2.2版本（注：Ubuntu22.04只能安装Ruby3.0以上（不包括3.0）的版本，具体踩坑记录见篇末错误总结）</p></li><li><p>在安装时可能需要输入自己的密码</p><p><img src="/posts/33976.htm/image-20231022000634717.png" alt></p></li></ul><h3 id="使用Ruby"><a href="#使用Ruby" class="headerlink" title="使用Ruby"></a>使用Ruby</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">rvm use <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ruby版本号</span><span class="token punctuation">></span></span> --default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置Ruby的默认版本，版本号应与安装时相同</li></ul><p><img src="/posts/33976.htm/image-20231022113839950.png" alt></p><ul><li>至此，Ruby安装完成</li></ul><h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><h3 id="安装Ruby时提示“Error-running-‘-rvm-make-install’-”"><a href="#安装Ruby时提示“Error-running-‘-rvm-make-install’-”" class="headerlink" title="安装Ruby时提示“Error running ‘__rvm_make install’ ”"></a>安装Ruby时提示“Error running ‘__rvm_make install’ ”</h3><ul><li>最初安装Ruby时安装的是2.7.5和2.7.2版本，均在install阶段提示此错误</li></ul><p><img src="/posts/33976.htm/image-20231021233630703.png" alt></p><ul><li>使用cat命令查看/usr/share/rvm/log/1697902330_ruby-2.7.5/install.log下的错误信息，发现提示错误2：build-ext</li></ul><p><img src="/posts/33976.htm/image-20231022001107153.png" alt></p><ul><li>问题原因及解决方法</li></ul><blockquote><p>Ubuntu22.04使用是OpenSSl3.0而非1.1.x版本，因此只能安装3.0版本以上（不包括3.0）的Ruby</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ruby on Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Vue学习（三）</title>
      <link href="/posts/55701.html"/>
      <url>/posts/55701.html</url>
      
        <content type="html"><![CDATA[<h2 id="拦截器学习"><a href="#拦截器学习" class="headerlink" title="拦截器学习"></a>拦截器学习</h2><h3 id="拦截器简介"><a href="#拦截器简介" class="headerlink" title="拦截器简介"></a>拦截器简介</h3><ul><li>拦截器在Web系统中很常见，对于某些全局统一的操作，我们可以把它提取到拦截器中实现，比如以下几种情景：<ol><li>权限检查：如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录界面</li><li>性能监控：有时系统在某段时间莫名奇妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间</li><li>通用行为：读取Cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用。还有提取Locale、Theme信息等，只要是多个处理程序都需要的，即可使用拦截器实现</li></ol></li><li>SpringBoot定义了HandlerInterceptor接口来自定义拦截器的功能。HnadlerInterceptor接口定义了preHandle、postHandle、afterCompletion三种方法，我们可以通过重写这三种方法来实现请求前、请求后、页面渲染后等操作。示意图如下：</li></ul><p><img src="/posts/55701.htm/image-20231022214843629.png" alt></p><h3 id="拦截器的定义"><a href="#拦截器的定义" class="headerlink" title="拦截器的定义"></a>拦截器的定义</h3><ul><li>拦截器的经典定义如下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">&#123;</span>    <span class="token comment">//preHandle方法是在Controller的方法调用之前进行处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span><span class="token string">"通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拦截器的注册"><a href="#拦截器的注册" class="headerlink" title="拦截器的注册"></a>拦截器的注册</h3><ul><li>在定义完拦截器后，还需要对拦截器进行注册，否则该拦截器无法使用</li><li>addPathPatterns方法定义拦截的地址</li><li>excludePathPatterns定义排除某些地址不被拦截</li><li>注册某一拦截器如果没有addPathPatterns任何一个url的话，则表示拦截所有的请求</li><li>注册某一拦截器如果没有excludePathPatterns任何一个请求的话，则表示不放过任何一个请求</li></ul><p>拦截器的注册示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginInterceptor是之前定义的拦截器，这里表示该拦截器需要拦截所有/user开头的请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截器应用"><a href="#拦截器应用" class="headerlink" title="拦截器应用"></a>拦截器应用</h2><h3 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h3><ul><li>在com.example.helloworld下创建interceptor包，在包中新建LoginInterceptor类，并重写preHandle方法</li></ul><p><img src="/posts/55701.htm/image-20231022223119487.png" alt></p><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><ul><li>在com.example.helloworld下创建config包，在包中新建WebConfig类，并注册LoginInterceptor拦截器</li></ul><p><img src="/posts/55701.htm/image-20231022223605309.png" alt></p><h3 id="测试拦截器"><a href="#测试拦截器" class="headerlink" title="测试拦截器"></a>测试拦截器</h3><ul><li>在HelloController中定义相关的控制器方法，接收来自/user这一URL的get请求</li></ul><p><img src="/posts/55701.htm/image-20231022224049511.png" alt></p><ul><li>启动项目后在浏览器向/user发送get请求，后端成功返回相应的数据</li></ul><p><img src="/posts/55701.htm/image-20231022223838014.png" alt></p><ul><li>同时查看IDEA的终端，发现成功进入LoginInterceptor拦截器，输出“preHandle拦截器”字样</li></ul><p><img src="/posts/55701.htm/image-20231022223942782.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot+Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Vue学习（二）</title>
      <link href="/posts/54764.html"/>
      <url>/posts/54764.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot的MVC架构"><a href="#SpringBoot的MVC架构" class="headerlink" title="SpringBoot的MVC架构"></a>SpringBoot的MVC架构</h2><p>SpringBoot的MVC架构如图所示，分为Model、View、Controller三部分</p><p><img src="/posts/54764.htm/image-20231020200250730.png" alt></p><h2 id="控制器注解"><a href="#控制器注解" class="headerlink" title="控制器注解"></a>控制器注解</h2><ul><li>SpringBoot提供了@Controller和@RestController两种注解来标识某个类，表示这个类将会负责接受和处理HTTP请求</li><li>如果请求的是页面和数据，则使用@Controller注解，该注解用于<strong>前后端不分离</strong>的项目</li><li><p>如果只是请求数据，则可以使用@RestController注解，该注解用于<strong>前后端分离</strong>的项目</p></li><li><p>默认情况下，@RestController注解会将返回的对象数据转换成JSON格式</p></li></ul><h2 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h2><ul><li><p>@RequestMapping注解主要负责URL的路由映射。它可以添加在Controller类或者具体的方法上</p></li><li><p>如果添加在Controller类上，则这个Controller中的所有路由映射都将会加上此映射规则，如果添加在方法上，则只对当前方法生效</p></li><li><p>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则。常用的属性参数如下：</p><ol><li>value：请求URL的路径，支持URL模版、正则表达式</li><li>method：HTTP请求方法，如get、post、delete、put等</li><li>consumes：请求的媒体类型（Content-Type），如application/json</li><li>produces：相应的媒体类型</li><li>params，headers：请求的参数及请求头的值</li></ol></li><li><p>@RequestMapping的通配符匹配非常简单实用，支持”<em>“、”?”、”*</em>“等通配符</p></li><li><p>符号”<em>“匹配任意字符，符号”*</em>“匹配任意路径，符号”?”匹配单个字符</p></li><li><p>有通配符的优先级低于没有通配符的，比如/user/add.json比/user/*.json优先匹配</p></li><li><p>有”<em>*”通配符的优先级低于有 “\</em>“通配符的</p></li><li><p>@RequestMapping(“/hello”,method = RequestMethod.GET)与@GetMapping(“/hello”)效果相同</p><p><img src="/posts/54764.htm/image-20231020202725554.png" alt></p></li></ul><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul><li>@RequestParam将请求参数绑定到控制器的方法参数上，接收的参数来自HTTP请求提货请求url的QueryString，当请求的参数名称与Controller的业务方法参数名称一致时，@RequestParam可以省略</li><li>@PathVaraible：用来处理动态的URL，URL的值可以作为控制器中处理方法的参数</li><li>@RequestBody接收的参数是来自requestBody中，即请求体。一般用于处理非Content-Type:application/x-www-form-urlencoded编码格式的数据，比如：“application/json”、“application/xml”等类型的数据</li></ul><ol><li><p>修改hello方法，添加参数name</p></li><li><p>后续测试时请求的参数名称与业务方法中的参数名相同，所以我这里省略@RequestParam注解</p></li></ol><p><img src="/posts/54764.htm/image-20231020203259454.png" alt></p><ol><li><p>在浏览器中访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 并向参数name赋值</p></li><li><p>浏览器成功返回“你好 SpringBoot”</p></li></ol><p><img src="/posts/54764.htm/image-20231020203338582.png" alt></p><ol><li>需要传递多个参数时，各个参数间用“&amp;”符号进行连接</li></ol><p><img src="/posts/54764.htm/image-20231020204242982.png" alt></p><p><img src="/posts/54764.htm/image-20231020204354455.png" alt></p><ol><li><p>若url请求中的参数名与方法中的参数名不一样，则必须在方法中加入@RequestParam注解，否则方法无法正常接收到参数的值</p></li><li><p>若添加了@RequestParam注解，url在进行请求时必须传入该参数，否则hello方法无法被调用，同时传入的参数名应当改为phone而不是phonenum</p></li></ol><p><img src="/posts/54764.htm/image-20231020205458154.png" alt></p><ol><li>这里url传递的参数名为phone，方法中定义的参数名为phonenum，但是参数仍被正常传入hello方法</li></ol><p><img src="/posts/54764.htm/image-20231020205526055.png" alt></p><ol><li>当需要传入的参数很多时，可以将参数封装成类</li><li>在com.example.helloworld包下新建entity包</li><li>在entity包下新建User类，并重写toString方法</li></ol><p><img src="/posts/54764.htm/image-20231020214812777.png" alt></p><p>1.在HelloController类中新建postTest方法，并添加@PostMapping注解，表示此方法仅接受post请求，并将请求中的数据赋值给User类的一个实例usr</p><p><img src="/posts/54764.htm/image-20231020212905919.png" alt></p><ol><li>在ApiPost中添加一个post请求的测试，并传入参数username和password（这两个参数的名字需要和User类中定义的成员变量名相同）</li><li>可以看到ApiPost中成功返回“POST请求”这一字符串，并且IDEA中成功打印相关的username和password信息</li></ol><p><img src="/posts/54764.htm/image-20231020215004601.png" alt></p><p><img src="/posts/54764.htm/image-20231020215021554.png" alt></p><ol><li>如果传入的参数想要是JSON格式的数据，则需要在方法的传入参数前添加@RequestBody注解</li></ol><p><img src="/posts/54764.htm/image-20231020223610097.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot+Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Vue学习（一）</title>
      <link href="/posts/17814.html"/>
      <url>/posts/17814.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot介绍"><a href="#SpringBoot介绍" class="headerlink" title="SpringBoot介绍"></a>SpringBoot介绍</h2><p>SpringBoot是由Pivotal团队提供的基于Spring的全新框架，旨在简化Spring应用的初始搭建和开发过程。它可以极大地降低Spring应用的开发门槛，让开发、测试、部署都变得更加简单。</p><h2 id="SpringBoot的特点"><a href="#SpringBoot的特点" class="headerlink" title="SpringBoot的特点"></a>SpringBoot的特点</h2><ul><li><p>遵循“约定优于配置”的原则，只需要很少的配置或者基本使用默认配置</p></li><li><p>能够使用内嵌的Tomcat、Jetty服务器，不需要部署war文件</p></li><li><p>提供定制化的启动器Starters，简化Maven配置，开箱即用</p></li><li><p>纯Java配置，没有代码生成，也不需要XML配置</p></li><li><p>提供了生产级的服务监控方案，如安全监控、应用监控、健康检测等</p></li></ul><h2 id="IDEA创建SpringBoot应用"><a href="#IDEA创建SpringBoot应用" class="headerlink" title="IDEA创建SpringBoot应用"></a>IDEA创建SpringBoot应用</h2><ol><li><p>设置项目名称及项目存储地址</p></li><li><p>设置语言为Java，构建器为Maven，JDK我使用的是1.8，因此Java版本设置为8</p></li><li><p>点击下一步</p></li></ol><p><img src="/posts/17814.htm/image-20231020172138038.png" alt></p><ol><li><p>设置构建的Spring项目为Spring Web项目（注：Springboot建议选择2.7版本）</p></li><li><p>点击创建</p></li></ol><p><img src="/posts/17814.htm/image-20231020172213172.png" alt></p><ol><li>自动创建的项目结构如图所示</li></ol><p><img src="/posts/17814.htm/image-20231020174632329.png" alt></p><h2 id="编写第一个后端程序"><a href="#编写第一个后端程序" class="headerlink" title="编写第一个后端程序"></a>编写第一个后端程序</h2><ol><li><p>在com.example.hellworld包下新建controller包</p></li><li><p>在controller包下新建HelloController类</p></li><li><p>为HelloController类添加@RestController注解</p></li><li><p>新建hello方法</p></li><li><p>为hello方法添加@GetMapping注解，并设置浏览器发送get方法时的路径地址，这里设置为“/hello”</p></li><li><p>进行如上设置后，网页访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 链接时，访问的就是hello方法</p></li></ol><p><img src="/posts/17814.htm/image-20231020175710880.png" alt></p><ol><li>回到HelloworldApplication类，运行main方法，即可启动Tomcat</li></ol><p><img src="/posts/17814.htm/image-20231020175743639.png" alt></p><ol><li>网页访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 链接，后端调用hello方法，返回字符串“Hello World!”</li></ol><p><img src="/posts/17814.htm/image-20231020175806756.png" alt></p><h2 id="开发环境的热部署"><a href="#开发环境的热部署" class="headerlink" title="开发环境的热部署"></a>开发环境的热部署</h2><h3 id="devtools介绍"><a href="#devtools介绍" class="headerlink" title="devtools介绍"></a>devtools介绍</h3><ul><li><p>在实际的项目开发和调试过程中，我们会频繁地修改后台文件，导致需要重新编译和启动项目，这个过程非常麻烦，影响开发效率</p></li><li><p>SpringBoot提供了spring-boot-devtools组件，使得无须手动重启SpringBoot应用即可重新编译、启动项目，提升开发效率</p></li><li><p>devtools会监听classpath下的文件变动，触发Restart类加载器重新加载该类，从而实现类文件和属性文件的热部署</p></li><li><p>并不是所有的更改都需要重启应用（如静态资源、视图模板），可以提供过设置spring.devtools.restart.exclude属性来指定一些文件或目录的修改不需要重启应用</p></li></ul><h3 id="配置devtools"><a href="#配置devtools" class="headerlink" title="配置devtools"></a>配置devtools</h3><ol><li><p>在pom.xml中添加devtools的依赖</p></li><li><p>使用optional=true表示依赖不会传递，即该项目依赖devtools，其他项目如果引入此项目生成的jar包，则不会包含devtools</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/17814.htm/image-20231020181102448.png" alt></p><ol><li>在application.properties中配置devtools，填入以下代码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 热部署生效spring<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>restart<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">true</span># 设置重启目录spring<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>restart<span class="token punctuation">.</span>additional<span class="token operator">-</span>paths<span class="token operator">=</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java# 设置classpath目录下的<span class="token keyword">static</span>文件夹内容修改不重启spring<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>restart<span class="token punctuation">.</span>exclude<span class="token operator">=</span><span class="token keyword">static</span><span class="token comment">/**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在IDEA的设置中找到“构建、执行、部署”——“编译器”选项，勾选“自动构建项目”，并点击应用</li></ol><p><img src="/posts/17814.htm/image-20231020182713451.png" alt></p><ol><li>在IDEA的设置中找到“高级设置”——“编译器”选项，勾选“即使开发的应用程序正在运行，也允许自动make启动”选项，并点击应用（该步骤为IDEA2021版本之后的操作方法，2021版本之前的IDEA需要使用”Ctrl+Shift+Alt+/“进入维护界面，再点击注册表项进入注册表，勾选“compiler.automake.allow.when.app.running”选项）</li></ol><p><img src="/posts/17814.htm/image-20231020183607200.png" alt></p><ol><li>完成以上操作即实现了项目的热部署，此时运行项目，在浏览器中访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 链接，发现成功返回“Hello world!”</li></ol><p><img src="/posts/17814.htm/image-20231020175806756.png" alt></p><ol><li>修改HelloController类中的hello方法，使其的返回值变为“你好!”，并保存，会发现IDEA中的控制台自动重新编译并部署了该项目</li></ol><p><img src="/posts/17814.htm/image-20231020184247168.png" alt></p><ol><li>此时再用浏览器访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 链接，发现成功返回“你好!”</li></ol><p><img src="/posts/17814.htm/image-20231020184327177.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot+Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站小记</title>
      <link href="/posts/52983.html"/>
      <url>/posts/52983.html</url>
      
        <content type="html"><![CDATA[<h2 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h2><ul><li>本站为Hexo编译出的静态网站，依托Github Page来实现网站的访问</li><li>本站使用的主题为matery，项目地址：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></li><li>本站域名为<a href="https://yuichi.top">https://yuichi.top</a> ，域名提供商为NameSilo，购入价为￥20/年，网站使用Cloudflare配置域名解析</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>contact</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
